// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/pdfium_dart.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class pdfium_wrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  pdfium_wrapper(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  pdfium_wrapper.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin = _lookup<ffi.Pointer<FILE>>(
    'stdin',
  );

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(ffi.Pointer<ffi.Char> __filename) {
    return _remove(__filename);
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'remove',
      );
  late final _remove = _removePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(ffi.Pointer<ffi.Char> __old, ffi.Pointer<ffi.Char> __new) {
    return _rename(__old, __new);
  }

  late final _renamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(__oldfd, __old, __newfd, __new);
  }

  late final _renameatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('renameat');
  late final _renameat = _renameatPtr
      .asFunction<
        int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)
      >();

  int fclose(ffi.Pointer<FILE> __stream) {
    return _fclose(__stream);
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fclose',
      );
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(ffi.Pointer<ffi.Char> arg0) {
    return _tmpnam(arg0);
  }

  late final _tmpnamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(ffi.Pointer<ffi.Char> __s) {
    return _tmpnam_r(__s);
  }

  late final _tmpnam_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(__dir, __pfx);
  }

  late final _tempnamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('tempnam');
  late final _tempnam = _tempnamPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int fflush(ffi.Pointer<FILE> __stream) {
    return _fflush(__stream);
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fflush',
      );
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(ffi.Pointer<FILE> __stream) {
    return _fflush_unlocked(__stream);
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fflush_unlocked',
      );
  late final _fflush_unlocked = _fflush_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(__filename, __modes);
  }

  late final _fopenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('fopen');
  late final _fopen = _fopenPtr
      .asFunction<
        ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(__filename, __modes, __stream);
  }

  late final _freopenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<FILE>,
          )
        >
      >('freopen');
  late final _freopen = _freopenPtr
      .asFunction<
        ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>,
        )
      >();

  ffi.Pointer<FILE> fdopen(int __fd, ffi.Pointer<ffi.Char> __modes) {
    return _fdopen(__fd, __modes);
  }

  late final _fdopenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)
        >
      >('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(__s, __len, __modes);
  }

  late final _fmemopenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('fmemopen');
  late final _fmemopen = _fmemopenPtr
      .asFunction<
        ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(__bufloc, __sizeloc);
  }

  late final _open_memstreamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('open_memstream');
  late final _open_memstream = _open_memstreamPtr
      .asFunction<
        ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  void setbuf(ffi.Pointer<FILE> __stream, ffi.Pointer<ffi.Char> __buf) {
    return _setbuf(__stream, __buf);
  }

  late final _setbufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)
        >
      >('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(__stream, __buf, __modes, __n);
  }

  late final _setvbufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<FILE>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Size,
          )
        >
      >('setvbuf');
  late final _setvbuf = _setvbufPtr
      .asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)
      >();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(__stream, __buf, __size);
  }

  late final _setbufferPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('setbuffer');
  late final _setbuffer = _setbufferPtr
      .asFunction<
        void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)
      >();

  void setlinebuf(ffi.Pointer<FILE> __stream) {
    return _setlinebuf(__stream);
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'setlinebuf',
      );
  late final _setlinebuf = _setlinebufPtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(ffi.Pointer<FILE> __stream, ffi.Pointer<ffi.Char> __format) {
    return _fprintf(__stream, __format);
  }

  late final _fprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)
        >
      >('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(ffi.Pointer<ffi.Char> __format) {
    return _printf(__format);
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'printf',
      );
  late final _printf = _printfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(ffi.Pointer<ffi.Char> __s, ffi.Pointer<ffi.Char> __format) {
    return _sprintf(__s, __format);
  }

  late final _sprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(__s, __format, __arg);
  }

  late final _vfprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<FILE>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vfprintf');
  late final _vfprintf = _vfprintfPtr
      .asFunction<
        int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(__format, __arg);
  }

  late final _vprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)
        >
      >('vprintf');
  late final _vprintf = _vprintfPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)
      >();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(__s, __format, __arg);
  }

  late final _vsprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vsprintf');
  late final _vsprintf = _vsprintfPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(__s, __maxlen, __format);
  }

  late final _snprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('snprintf');
  late final _snprintf = _snprintfPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)
      >();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(__s, __maxlen, __format, __arg);
  }

  late final _vsnprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(__fd, __fmt, __arg);
  }

  late final _vdprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<
        int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)
      >();

  int dprintf(int __fd, ffi.Pointer<ffi.Char> __fmt) {
    return _dprintf(__fd, __fmt);
  }

  late final _dprintfPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>
      >('dprintf');
  late final _dprintf = _dprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(ffi.Pointer<FILE> __stream, ffi.Pointer<ffi.Char> __format) {
    return _fscanf(__stream, __format);
  }

  late final _fscanfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)
        >
      >('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(ffi.Pointer<ffi.Char> __format) {
    return _scanf(__format);
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'scanf',
      );
  late final _scanf = _scanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(ffi.Pointer<ffi.Char> __s, ffi.Pointer<ffi.Char> __format) {
    return _sscanf(__s, __format);
  }

  late final _sscanfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(__s, __format, __arg);
  }

  late final _vfscanfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<FILE>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vfscanf');
  late final _vfscanf = _vfscanfPtr
      .asFunction<
        int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int vscanf(ffi.Pointer<ffi.Char> __format, ffi.Pointer<__va_list_tag> __arg) {
    return _vscanf(__format, __arg);
  }

  late final _vscanfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)
        >
      >('vscanf');
  late final _vscanf = _vscanfPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)
      >();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(__s, __format, __arg);
  }

  late final _vsscanfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('vsscanf');
  late final _vsscanf = _vsscanfPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int fgetc(ffi.Pointer<FILE> __stream) {
    return _fgetc(__stream);
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(ffi.Pointer<FILE> __stream) {
    return _getc(__stream);
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'getchar',
  );
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(ffi.Pointer<FILE> __stream) {
    return _getc_unlocked(__stream);
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'getc_unlocked',
      );
  late final _getc_unlocked = _getc_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked = _getchar_unlockedPtr
      .asFunction<int Function()>();

  int fgetc_unlocked(ffi.Pointer<FILE> __stream) {
    return _fgetc_unlocked(__stream);
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fgetc_unlocked',
      );
  late final _fgetc_unlocked = _fgetc_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(int __c, ffi.Pointer<FILE> __stream) {
    return _fputc(__c, __stream);
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'fputc',
      );
  late final _fputc = _fputcPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(int __c, ffi.Pointer<FILE> __stream) {
    return _putc(__c, __stream);
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'putc',
      );
  late final _putc = _putcPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(int __c) {
    return _putchar(__c);
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(int __c, ffi.Pointer<FILE> __stream) {
    return _fputc_unlocked(__c, __stream);
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'fputc_unlocked',
      );
  late final _fputc_unlocked = _fputc_unlockedPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(int __c, ffi.Pointer<FILE> __stream) {
    return _putc_unlocked(__c, __stream);
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'putc_unlocked',
      );
  late final _putc_unlocked = _putc_unlockedPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(int __c) {
    return _putchar_unlocked(__c);
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'putchar_unlocked',
      );
  late final _putchar_unlocked = _putchar_unlockedPtr
      .asFunction<int Function(int)>();

  int getw(ffi.Pointer<FILE> __stream) {
    return _getw(__stream);
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(int __w, ffi.Pointer<FILE> __stream) {
    return _putw(__w, __stream);
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'putw',
      );
  late final _putw = _putwPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(__s, __n, __stream);
  }

  late final _fgetsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<FILE>,
          )
        >
      >('fgets');
  late final _fgets = _fgetsPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<FILE>,
        )
      >();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(__lineptr, __n, __delimiter, __stream);
  }

  late final ___getdelimPtr =
      _lookup<
        ffi.NativeFunction<
          __ssize_t Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>,
            ffi.Int,
            ffi.Pointer<FILE>,
          )
        >
      >('__getdelim');
  late final ___getdelim = ___getdelimPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<FILE>,
        )
      >();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(__lineptr, __n, __delimiter, __stream);
  }

  late final _getdelimPtr =
      _lookup<
        ffi.NativeFunction<
          __ssize_t Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>,
            ffi.Int,
            ffi.Pointer<FILE>,
          )
        >
      >('getdelim');
  late final _getdelim = _getdelimPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<FILE>,
        )
      >();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(__lineptr, __n, __stream);
  }

  late final _getlinePtr =
      _lookup<
        ffi.NativeFunction<
          __ssize_t Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<FILE>,
          )
        >
      >('getline');
  late final _getline = _getlinePtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>,
        )
      >();

  int fputs(ffi.Pointer<ffi.Char> __s, ffi.Pointer<FILE> __stream) {
    return _fputs(__s, __stream);
  }

  late final _fputsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)
        >
      >('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(ffi.Pointer<ffi.Char> __s) {
    return _puts(__s);
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'puts',
      );
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(int __c, ffi.Pointer<FILE> __stream) {
    return _ungetc(__c, __stream);
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
        'ungetc',
      );
  late final _ungetc = _ungetcPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(__ptr, __size, __n, __stream);
  }

  late final _freadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<FILE>,
          )
        >
      >('fread');
  late final _fread = _freadPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)
      >();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(__ptr, __size, __n, __s);
  }

  late final _fwritePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<FILE>,
          )
        >
      >('fwrite');
  late final _fwrite = _fwritePtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)
      >();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(__ptr, __size, __n, __stream);
  }

  late final _fread_unlockedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<FILE>,
          )
        >
      >('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)
      >();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(__ptr, __size, __n, __stream);
  }

  late final _fwrite_unlockedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<FILE>,
          )
        >
      >('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)
      >();

  int fseek(ffi.Pointer<FILE> __stream, int __off, int __whence) {
    return _fseek(__stream, __off, __whence);
  }

  late final _fseekPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)
        >
      >('fseek');
  late final _fseek = _fseekPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(ffi.Pointer<FILE> __stream) {
    return _ftell(__stream);
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
        'ftell',
      );
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(ffi.Pointer<FILE> __stream) {
    return _rewind(__stream);
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'rewind',
      );
  late final _rewind = _rewindPtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(ffi.Pointer<FILE> __stream, int __off, int __whence) {
    return _fseeko(__stream, __off, __whence);
  }

  late final _fseekoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)
        >
      >('fseeko');
  late final _fseeko = _fseekoPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(ffi.Pointer<FILE> __stream) {
    return _ftello(__stream);
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
        'ftello',
      );
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(ffi.Pointer<FILE> __stream, ffi.Pointer<fpos_t> __pos) {
    return _fgetpos(__stream, __pos);
  }

  late final _fgetposPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)
        >
      >('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(ffi.Pointer<FILE> __stream, ffi.Pointer<fpos_t> __pos) {
    return _fsetpos(__stream, __pos);
  }

  late final _fsetposPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)
        >
      >('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(ffi.Pointer<FILE> __stream) {
    return _clearerr(__stream);
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'clearerr',
      );
  late final _clearerr = _clearerrPtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(ffi.Pointer<FILE> __stream) {
    return _feof(__stream);
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(ffi.Pointer<FILE> __stream) {
    return _ferror(__stream);
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'ferror',
      );
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(ffi.Pointer<FILE> __stream) {
    return _clearerr_unlocked(__stream);
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'clearerr_unlocked',
      );
  late final _clearerr_unlocked = _clearerr_unlockedPtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(ffi.Pointer<FILE> __stream) {
    return _feof_unlocked(__stream);
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'feof_unlocked',
      );
  late final _feof_unlocked = _feof_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(ffi.Pointer<FILE> __stream) {
    return _ferror_unlocked(__stream);
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'ferror_unlocked',
      );
  late final _ferror_unlocked = _ferror_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(ffi.Pointer<ffi.Char> __s) {
    return _perror(__s);
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'perror',
      );
  late final _perror = _perrorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(ffi.Pointer<FILE> __stream) {
    return _fileno(__stream);
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fileno',
      );
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(ffi.Pointer<FILE> __stream) {
    return _fileno_unlocked(__stream);
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'fileno_unlocked',
      );
  late final _fileno_unlocked = _fileno_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(ffi.Pointer<FILE> __stream) {
    return _pclose(__stream);
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'pclose',
      );
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(__command, __modes);
  }

  late final _popenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('popen');
  late final _popen = _popenPtr
      .asFunction<
        ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> ctermid(ffi.Pointer<ffi.Char> __s) {
    return _ctermid(__s);
  }

  late final _ctermidPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(ffi.Pointer<FILE> __stream) {
    return _flockfile(__stream);
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'flockfile',
      );
  late final _flockfile = _flockfilePtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(ffi.Pointer<FILE> __stream) {
    return _ftrylockfile(__stream);
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        'ftrylockfile',
      );
  late final _ftrylockfile = _ftrylockfilePtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(ffi.Pointer<FILE> __stream) {
    return _funlockfile(__stream);
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'funlockfile',
      );
  late final _funlockfile = _funlockfilePtr
      .asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(ffi.Pointer<FILE> arg0) {
    return ___uflow(arg0);
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
        '__uflow',
      );
  late final ___uflow = ___uflowPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(ffi.Pointer<FILE> arg0, int arg1) {
    return ___overflow(arg0, arg1);
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
        '__overflow',
      );
  late final ___overflow = ___overflowPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
        '__ctype_get_mb_cur_max',
      );
  late final ___ctype_get_mb_cur_max = ___ctype_get_mb_cur_maxPtr
      .asFunction<int Function()>();

  double atof(ffi.Pointer<ffi.Char> __nptr) {
    return _atof(__nptr);
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
        'atof',
      );
  late final _atof = _atofPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(ffi.Pointer<ffi.Char> __nptr) {
    return _atoi(__nptr);
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'atoi',
      );
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(ffi.Pointer<ffi.Char> __nptr) {
    return _atol(__nptr);
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
        'atol',
      );
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(ffi.Pointer<ffi.Char> __nptr) {
    return _atoll(__nptr);
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
        'atoll',
      );
  late final _atoll = _atollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(__nptr, __endptr);
  }

  late final _strtodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Double Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('strtod');
  late final _strtod = _strtodPtr
      .asFunction<
        double Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(__nptr, __endptr);
  }

  late final _strtofPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Float Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('strtof');
  late final _strtof = _strtofPtr
      .asFunction<
        double Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(__nptr, __endptr, __base);
  }

  late final _strtolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Long Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtol');
  late final _strtol = _strtolPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(__nptr, __endptr, __base);
  }

  late final _strtoulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtoul');
  late final _strtoul = _strtoulPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(__nptr, __endptr, __base);
  }

  late final _strtoqPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.LongLong Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtoq');
  late final _strtoq = _strtoqPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(__nptr, __endptr, __base);
  }

  late final _strtouqPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtouq');
  late final _strtouq = _strtouqPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(__nptr, __endptr, __base);
  }

  late final _strtollPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.LongLong Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtoll');
  late final _strtoll = _strtollPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(__nptr, __endptr, __base);
  }

  late final _strtoullPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
          )
        >
      >('strtoull');
  late final _strtoull = _strtoullPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  ffi.Pointer<ffi.Char> l64a(int __n) {
    return _l64a(__n);
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
        'l64a',
      );
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(ffi.Pointer<ffi.Char> __s) {
    return _a64l(__s);
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
        'a64l',
      );
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(__nfds, __readfds, __writefds, __exceptfds, __timeout);
  }

  late final _selectPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<timeval>,
          )
        >
      >('select');
  late final _select = _selectPtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timeval>,
        )
      >();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<timespec>,
            ffi.Pointer<__sigset_t>,
          )
        >
      >('pselect');
  late final _pselect = _pselectPtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>,
        )
      >();

  int random() {
    return _random();
  }

  late final _randomPtr = _lookup<ffi.NativeFunction<ffi.Long Function()>>(
    'random',
  );
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(int __seed) {
    return _srandom(__seed);
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
        'srandom',
      );
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(__seed, __statebuf, __statelen);
  }

  late final _initstatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('initstate');
  late final _initstate = _initstatePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Char> setstate(ffi.Pointer<ffi.Char> __statebuf) {
    return _setstate(__statebuf);
  }

  late final _setstatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(__buf, __result);
  }

  late final _random_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)
        >
      >('random_r');
  late final _random_r = _random_rPtr
      .asFunction<
        int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)
      >();

  int srandom_r(int __seed, ffi.Pointer<random_data> __buf) {
    return _srandom_r(__seed, __buf);
  }

  late final _srandom_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<random_data>)
        >
      >('srandom_r');
  late final _srandom_r = _srandom_rPtr
      .asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(__seed, __statebuf, __statelen, __buf);
  }

  late final _initstate_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<random_data>,
          )
        >
      >('initstate_r');
  late final _initstate_r = _initstate_rPtr
      .asFunction<
        int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)
      >();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(__statebuf, __buf);
  }

  late final _setstate_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)
        >
      >('setstate_r');
  late final _setstate_r = _setstate_rPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)
      >();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(int __seed) {
    return _srand(__seed);
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(ffi.Pointer<ffi.UnsignedInt> __seed) {
    return _rand_r(__seed);
  }

  late final _rand_rPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>
      >('rand_r');
  late final _rand_r = _rand_rPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr = _lookup<ffi.NativeFunction<ffi.Double Function()>>(
    'drand48',
  );
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(ffi.Pointer<ffi.UnsignedShort> __xsubi) {
    return _erand48(__xsubi);
  }

  late final _erand48Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>
      >('erand48');
  late final _erand48 = _erand48Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function()>>(
    'lrand48',
  );
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(ffi.Pointer<ffi.UnsignedShort> __xsubi) {
    return _nrand48(__xsubi);
  }

  late final _nrand48Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>
      >('nrand48');
  late final _nrand48 = _nrand48Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function()>>(
    'mrand48',
  );
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(ffi.Pointer<ffi.UnsignedShort> __xsubi) {
    return _jrand48(__xsubi);
  }

  late final _jrand48Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>
      >('jrand48');
  late final _jrand48 = _jrand48Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(int __seedval) {
    return _srand48(__seedval);
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(__seed16v);
  }

  late final _seed48Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
            ffi.Pointer<ffi.UnsignedShort>,
          )
        >
      >('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<
        ffi.Pointer<ffi.UnsignedShort> Function(ffi.Pointer<ffi.UnsignedShort>)
      >();

  void lcong48(ffi.Pointer<ffi.UnsignedShort> __param) {
    return _lcong48(__param);
  }

  late final _lcong48Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>
      >('lcong48');
  late final _lcong48 = _lcong48Ptr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(__buffer, __result);
  }

  late final _drand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)
        >
      >('drand48_r');
  late final _drand48_r = _drand48_rPtr
      .asFunction<
        int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)
      >();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(__xsubi, __buffer, __result);
  }

  late final _erand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('erand48_r');
  late final _erand48_r = _erand48_rPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedShort>,
          ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(__buffer, __result);
  }

  late final _lrand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)
        >
      >('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr
      .asFunction<
        int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)
      >();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(__xsubi, __buffer, __result);
  }

  late final _nrand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>,
            ffi.Pointer<ffi.Long>,
          )
        >
      >('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedShort>,
          ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>,
        )
      >();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(__buffer, __result);
  }

  late final _mrand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)
        >
      >('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr
      .asFunction<
        int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)
      >();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(__xsubi, __buffer, __result);
  }

  late final _jrand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>,
            ffi.Pointer<ffi.Long>,
          )
        >
      >('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedShort>,
          ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>,
        )
      >();

  int srand48_r(int __seedval, ffi.Pointer<drand48_data> __buffer) {
    return _srand48_r(__seedval, __buffer);
  }

  late final _srand48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)
        >
      >('srand48_r');
  late final _srand48_r = _srand48_rPtr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(__seed16v, __buffer);
  }

  late final _seed48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>,
          )
        >
      >('seed48_r');
  late final _seed48_r = _seed48_rPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)
      >();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(__param, __buffer);
  }

  late final _lcong48_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>,
          )
        >
      >('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)
      >();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(ffi.Pointer<ffi.Void> __buf, int __size) {
    return _arc4random_buf(__buf, __size);
  }

  late final _arc4random_bufPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(int __upper_bound) {
    return _arc4random_uniform(__upper_bound);
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
        'arc4random_uniform',
      );
  late final _arc4random_uniform = _arc4random_uniformPtr
      .asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(int __size) {
    return _malloc(__size);
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'malloc',
      );
  late final _malloc = _mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(int __nmemb, int __size) {
    return _calloc(__nmemb, __size);
  }

  late final _callocPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>
      >('calloc');
  late final _calloc = _callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(ffi.Pointer<ffi.Void> __ptr, int __size) {
    return _realloc(__ptr, __size);
  }

  late final _reallocPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(ffi.Pointer<ffi.Void> __ptr) {
    return _free(__ptr);
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'free',
      );
  late final _free = _freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(__ptr, __nmemb, __size);
  }

  late final _reallocarrayPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
          )
        >
      >('reallocarray');
  late final _reallocarray = _reallocarrayPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)
      >();

  ffi.Pointer<ffi.Void> alloca(int __size) {
    return _alloca(__size);
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'alloca',
      );
  late final _alloca = _allocaPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(int __size) {
    return _valloc(__size);
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'valloc',
      );
  late final _valloc = _vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(__memptr, __alignment, __size);
  }

  late final _posix_memalignPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Size,
            ffi.Size,
          )
        >
      >('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(int __alignment, int __size) {
    return _aligned_alloc(__alignment, __size);
  }

  late final _aligned_allocPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>
      >('aligned_alloc');
  late final _aligned_alloc = _aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'abort',
  );
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func) {
    return _atexit(__func);
  }

  late final _atexitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)
        >
      >('atexit');
  late final _atexit = _atexitPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)
      >();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(__func);
  }

  late final _at_quick_exitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)
        >
      >('at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)
      >();

  int on_exit(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int __status, ffi.Pointer<ffi.Void> __arg)
      >
    >
    __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(__func, __arg);
  }

  late final _on_exitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int __status, ffi.Pointer<ffi.Void> __arg)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('on_exit');
  late final _on_exit = _on_exitPtr
      .asFunction<
        int Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int __status, ffi.Pointer<ffi.Void> __arg)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void exit(int __status) {
    return _exit1(__status);
  }

  late final _exitPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
    'exit',
  );
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(int __status) {
    return _quick_exit(__status);
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(int __status) {
    return __Exit(__status);
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(ffi.Pointer<ffi.Char> __name) {
    return _getenv(__name);
  }

  late final _getenvPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(ffi.Pointer<ffi.Char> __string) {
    return _putenv(__string);
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'putenv',
      );
  late final _putenv = _putenvPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(__name, __value, __replace);
  }

  late final _setenvPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('setenv');
  late final _setenv = _setenvPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int unsetenv(ffi.Pointer<ffi.Char> __name) {
    return _unsetenv(__name);
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'unsetenv',
      );
  late final _unsetenv = _unsetenvPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'clearenv',
  );
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(ffi.Pointer<ffi.Char> __template) {
    return _mktemp(__template);
  }

  late final _mktempPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(ffi.Pointer<ffi.Char> __template) {
    return _mkstemp(__template);
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'mkstemp',
      );
  late final _mkstemp = _mkstempPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(ffi.Pointer<ffi.Char> __template, int __suffixlen) {
    return _mkstemps(__template, __suffixlen);
  }

  late final _mkstempsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>
      >('mkstemps');
  late final _mkstemps = _mkstempsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(ffi.Pointer<ffi.Char> __template) {
    return _mkdtemp(__template);
  }

  late final _mkdtempPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(ffi.Pointer<ffi.Char> __command) {
    return _system(__command);
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'system',
      );
  late final _system = _systemPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(__name, __resolved);
  }

  late final _realpathPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('realpath');
  late final _realpath = _realpathPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(__key, __base, __nmemb, __size, __compar);
  }

  late final _bsearchPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            __compar_fn_t,
          )
        >
      >('bsearch');
  late final _bsearch = _bsearchPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          __compar_fn_t,
        )
      >();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(__base, __nmemb, __size, __compar);
  }

  late final _qsortPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            __compar_fn_t,
          )
        >
      >('qsort');
  late final _qsort = _qsortPtr
      .asFunction<
        void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)
      >();

  int abs(int __x) {
    return _abs(__x);
  }

  late final _absPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
    'abs',
  );
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(int __x) {
    return _labs(__x);
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(int __x) {
    return _llabs(__x);
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(int __numer, int __denom) {
    return _div(__numer, __denom);
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(int __numer, int __denom) {
    return _ldiv(__numer, __denom);
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(int __numer, int __denom) {
    return _lldiv(__numer, __denom);
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
        'lldiv',
      );
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(__value, __ndigit, __decpt, __sign);
  }

  late final _ecvtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Double,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ecvt');
  late final _ecvt = _ecvtPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(__value, __ndigit, __decpt, __sign);
  }

  late final _fcvtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Double,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('fcvt');
  late final _fcvt = _fcvtPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(__value, __ndigit, __buf);
  }

  late final _gcvtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Double,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gcvt');
  late final _gcvt = _gcvtPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)
      >();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(__value, __ndigit, __decpt, __sign, __buf, __len);
  }

  late final _ecvt_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Double,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr
      .asFunction<
        int Function(
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(__value, __ndigit, __decpt, __sign, __buf, __len);
  }

  late final _fcvt_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Double,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr
      .asFunction<
        int Function(
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int mblen(ffi.Pointer<ffi.Char> __s, int __n) {
    return _mblen(__s, __n);
  }

  late final _mblenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('mblen');
  late final _mblen = _mblenPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(ffi.Pointer<ffi.WChar> __pwc, ffi.Pointer<ffi.Char> __s, int __n) {
    return _mbtowc(__pwc, __s, __n);
  }

  late final _mbtowcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('mbtowc');
  late final _mbtowc = _mbtowcPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)
      >();

  int wctomb(ffi.Pointer<ffi.Char> __s, int __wchar) {
    return _wctomb(__s, __wchar);
  }

  late final _wctombPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>
      >('wctomb');
  late final _wctomb = _wctombPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(__pwcs, __s, __n);
  }

  late final _mbstowcsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)
      >();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(__s, __pwcs, __n);
  }

  late final _wcstombsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.WChar>,
            ffi.Size,
          )
        >
      >('wcstombs');
  late final _wcstombs = _wcstombsPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)
      >();

  int rpmatch(ffi.Pointer<ffi.Char> __response) {
    return _rpmatch(__response);
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'rpmatch',
      );
  late final _rpmatch = _rpmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(__optionp, __tokens, __valuep);
  }

  late final _getsuboptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('getsubopt');
  late final _getsubopt = _getsuboptPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int getloadavg(ffi.Pointer<ffi.Double> __loadavg, int __nelem) {
    return _getloadavg(__loadavg, __nelem);
  }

  late final _getloadavgPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>
      >('getloadavg');
  late final _getloadavg = _getloadavgPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  /// Function: FPDF_InitLibraryWithConfig
  /// Initialize the PDFium library and allocate global resources for it.
  /// Parameters:
  /// config - configuration information as above.
  /// Return value:
  /// None.
  /// Comments:
  /// You have to call this function before you can call any PDF
  /// processing functions.
  void FPDF_InitLibraryWithConfig(ffi.Pointer<FPDF_LIBRARY_CONFIG> config) {
    return _FPDF_InitLibraryWithConfig(config);
  }

  late final _FPDF_InitLibraryWithConfigPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FPDF_LIBRARY_CONFIG>)>
      >('FPDF_InitLibraryWithConfig');
  late final _FPDF_InitLibraryWithConfig =
      _FPDF_InitLibraryWithConfigPtr.asFunction<
        void Function(ffi.Pointer<FPDF_LIBRARY_CONFIG>)
      >();

  /// Function: FPDF_InitLibrary
  /// Initialize the PDFium library (alternative form).
  /// Parameters:
  /// None
  /// Return value:
  /// None.
  /// Comments:
  /// Convenience function to call FPDF_InitLibraryWithConfig() with a
  /// default configuration for backwards compatibility purposes. New
  /// code should call FPDF_InitLibraryWithConfig() instead. This will
  /// be deprecated in the future.
  void FPDF_InitLibrary() {
    return _FPDF_InitLibrary();
  }

  late final _FPDF_InitLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('FPDF_InitLibrary');
  late final _FPDF_InitLibrary =
      _FPDF_InitLibraryPtr.asFunction<void Function()>();

  /// Function: FPDF_DestroyLibrary
  /// Release global resources allocated to the PDFium library by
  /// FPDF_InitLibrary() or FPDF_InitLibraryWithConfig().
  /// Parameters:
  /// None.
  /// Return value:
  /// None.
  /// Comments:
  /// After this function is called, you must not call any PDF
  /// processing functions.
  ///
  /// Calling this function does not automatically close other
  /// objects. It is recommended to close other objects before
  /// closing the library with this function.
  void FPDF_DestroyLibrary() {
    return _FPDF_DestroyLibrary();
  }

  late final _FPDF_DestroyLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('FPDF_DestroyLibrary');
  late final _FPDF_DestroyLibrary =
      _FPDF_DestroyLibraryPtr.asFunction<void Function()>();

  /// Function: FPDF_SetSandBoxPolicy
  /// Set the policy for the sandbox environment.
  /// Parameters:
  /// policy -   The specified policy for setting, for example:
  /// FPDF_POLICY_MACHINETIME_ACCESS.
  /// enable -   True to enable, false to disable the policy.
  /// Return value:
  /// None.
  void FPDF_SetSandBoxPolicy(int policy, int enable) {
    return _FPDF_SetSandBoxPolicy(policy, enable);
  }

  late final _FPDF_SetSandBoxPolicyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_DWORD, FPDF_BOOL)>>(
        'FPDF_SetSandBoxPolicy',
      );
  late final _FPDF_SetSandBoxPolicy =
      _FPDF_SetSandBoxPolicyPtr.asFunction<void Function(int, int)>();

  /// Function: FPDF_LoadDocument
  /// Open and load a PDF document.
  /// Parameters:
  /// file_path -  Path to the PDF file (including extension).
  /// password  -  A string used as the password for the PDF file.
  /// If no password is needed, empty or NULL can be used.
  /// See comments below regarding the encoding.
  /// Return value:
  /// A handle to the loaded document, or NULL on failure.
  /// Comments:
  /// Loaded document can be closed by FPDF_CloseDocument().
  /// If this function fails, you can use FPDF_GetLastError() to retrieve
  /// the reason why it failed.
  ///
  /// The encoding for |file_path| is UTF-8.
  ///
  /// The encoding for |password| can be either UTF-8 or Latin-1. PDFs,
  /// depending on the security handler revision, will only accept one or
  /// the other encoding. If |password|'s encoding and the PDF's expected
  /// encoding do not match, FPDF_LoadDocument() will automatically
  /// convert |password| to the other encoding.
  FPDF_DOCUMENT FPDF_LoadDocument(
    FPDF_STRING file_path,
    FPDF_BYTESTRING password,
  ) {
    return _FPDF_LoadDocument(file_path, password);
  }

  late final _FPDF_LoadDocumentPtr =
      _lookup<
        ffi.NativeFunction<FPDF_DOCUMENT Function(FPDF_STRING, FPDF_BYTESTRING)>
      >('FPDF_LoadDocument');
  late final _FPDF_LoadDocument =
      _FPDF_LoadDocumentPtr.asFunction<
        FPDF_DOCUMENT Function(FPDF_STRING, FPDF_BYTESTRING)
      >();

  /// Function: FPDF_LoadMemDocument
  /// Open and load a PDF document from memory.
  /// Parameters:
  /// data_buf    -   Pointer to a buffer containing the PDF document.
  /// size        -   Number of bytes in the PDF document.
  /// password    -   A string used as the password for the PDF file.
  /// If no password is needed, empty or NULL can be used.
  /// Return value:
  /// A handle to the loaded document, or NULL on failure.
  /// Comments:
  /// The memory buffer must remain valid when the document is open.
  /// The loaded document can be closed by FPDF_CloseDocument.
  /// If this function fails, you can use FPDF_GetLastError() to retrieve
  /// the reason why it failed.
  ///
  /// See the comments for FPDF_LoadDocument() regarding the encoding for
  /// |password|.
  /// Notes:
  /// If PDFium is built with the XFA module, the application should call
  /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
  /// fields defined in the fpdfformfill.h file.
  FPDF_DOCUMENT FPDF_LoadMemDocument(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    FPDF_BYTESTRING password,
  ) {
    return _FPDF_LoadMemDocument(data_buf, size, password);
  }

  late final _FPDF_LoadMemDocumentPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_DOCUMENT Function(
            ffi.Pointer<ffi.Void>,
            ffi.Int,
            FPDF_BYTESTRING,
          )
        >
      >('FPDF_LoadMemDocument');
  late final _FPDF_LoadMemDocument =
      _FPDF_LoadMemDocumentPtr.asFunction<
        FPDF_DOCUMENT Function(ffi.Pointer<ffi.Void>, int, FPDF_BYTESTRING)
      >();

  /// Experimental API.
  /// Function: FPDF_LoadMemDocument64
  /// Open and load a PDF document from memory.
  /// Parameters:
  /// data_buf    -   Pointer to a buffer containing the PDF document.
  /// size        -   Number of bytes in the PDF document.
  /// password    -   A string used as the password for the PDF file.
  /// If no password is needed, empty or NULL can be used.
  /// Return value:
  /// A handle to the loaded document, or NULL on failure.
  /// Comments:
  /// The memory buffer must remain valid when the document is open.
  /// The loaded document can be closed by FPDF_CloseDocument.
  /// If this function fails, you can use FPDF_GetLastError() to retrieve
  /// the reason why it failed.
  ///
  /// See the comments for FPDF_LoadDocument() regarding the encoding for
  /// |password|.
  /// Notes:
  /// If PDFium is built with the XFA module, the application should call
  /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
  /// fields defined in the fpdfformfill.h file.
  FPDF_DOCUMENT FPDF_LoadMemDocument64(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    FPDF_BYTESTRING password,
  ) {
    return _FPDF_LoadMemDocument64(data_buf, size, password);
  }

  late final _FPDF_LoadMemDocument64Ptr =
      _lookup<
        ffi.NativeFunction<
          FPDF_DOCUMENT Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            FPDF_BYTESTRING,
          )
        >
      >('FPDF_LoadMemDocument64');
  late final _FPDF_LoadMemDocument64 =
      _FPDF_LoadMemDocument64Ptr.asFunction<
        FPDF_DOCUMENT Function(ffi.Pointer<ffi.Void>, int, FPDF_BYTESTRING)
      >();

  /// Function: FPDF_LoadCustomDocument
  /// Load PDF document from a custom access descriptor.
  /// Parameters:
  /// pFileAccess -   A structure for accessing the file.
  /// password    -   Optional password for decrypting the PDF file.
  /// Return value:
  /// A handle to the loaded document, or NULL on failure.
  /// Comments:
  /// The application must keep the file resources |pFileAccess| points to
  /// valid until the returned FPDF_DOCUMENT is closed. |pFileAccess|
  /// itself does not need to outlive the FPDF_DOCUMENT.
  ///
  /// The loaded document can be closed with FPDF_CloseDocument().
  ///
  /// See the comments for FPDF_LoadDocument() regarding the encoding for
  /// |password|.
  /// Notes:
  /// If PDFium is built with the XFA module, the application should call
  /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
  /// fields defined in the fpdfformfill.h file.
  FPDF_DOCUMENT FPDF_LoadCustomDocument(
    ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
    FPDF_BYTESTRING password,
  ) {
    return _FPDF_LoadCustomDocument(pFileAccess, password);
  }

  late final _FPDF_LoadCustomDocumentPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_DOCUMENT Function(ffi.Pointer<FPDF_FILEACCESS>, FPDF_BYTESTRING)
        >
      >('FPDF_LoadCustomDocument');
  late final _FPDF_LoadCustomDocument =
      _FPDF_LoadCustomDocumentPtr.asFunction<
        FPDF_DOCUMENT Function(ffi.Pointer<FPDF_FILEACCESS>, FPDF_BYTESTRING)
      >();

  /// Function: FPDF_GetFileVersion
  /// Get the file version of the given PDF document.
  /// Parameters:
  /// doc         -   Handle to a document.
  /// fileVersion -   The PDF file version. File version: 14 for 1.4, 15
  /// for 1.5, ...
  /// Return value:
  /// True if succeeds, false otherwise.
  /// Comments:
  /// If the document was created by FPDF_CreateNewDocument,
  /// then this function will always fail.
  int FPDF_GetFileVersion(FPDF_DOCUMENT doc, ffi.Pointer<ffi.Int> fileVersion) {
    return _FPDF_GetFileVersion(doc, fileVersion);
  }

  late final _FPDF_GetFileVersionPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(FPDF_DOCUMENT, ffi.Pointer<ffi.Int>)
        >
      >('FPDF_GetFileVersion');
  late final _FPDF_GetFileVersion =
      _FPDF_GetFileVersionPtr.asFunction<
        int Function(FPDF_DOCUMENT, ffi.Pointer<ffi.Int>)
      >();

  /// Function: FPDF_GetLastError
  /// Get last error code when a function fails.
  /// Parameters:
  /// None.
  /// Return value:
  /// A 32-bit integer indicating error code as defined above.
  /// Comments:
  /// If the previous SDK call succeeded, the return value of this
  /// function is not defined. This function only works in conjunction
  /// with APIs that mention FPDF_GetLastError() in their documentation.
  int FPDF_GetLastError() {
    return _FPDF_GetLastError();
  }

  late final _FPDF_GetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
        'FPDF_GetLastError',
      );
  late final _FPDF_GetLastError =
      _FPDF_GetLastErrorPtr.asFunction<int Function()>();

  /// Experimental API.
  /// Function: FPDF_DocumentHasValidCrossReferenceTable
  /// Whether the document's cross reference table is valid or not.
  /// Parameters:
  /// document    -   Handle to a document. Returned by FPDF_LoadDocument.
  /// Return value:
  /// True if the PDF parser did not encounter problems parsing the cross
  /// reference table. False if the parser could not parse the cross
  /// reference table and the table had to be rebuild from other data
  /// within the document.
  /// Comments:
  /// The return value can change over time as the PDF parser evolves.
  int FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document) {
    return _FPDF_DocumentHasValidCrossReferenceTable(document);
  }

  late final _FPDF_DocumentHasValidCrossReferenceTablePtr =
      _lookup<ffi.NativeFunction<FPDF_BOOL Function(FPDF_DOCUMENT)>>(
        'FPDF_DocumentHasValidCrossReferenceTable',
      );
  late final _FPDF_DocumentHasValidCrossReferenceTable =
      _FPDF_DocumentHasValidCrossReferenceTablePtr.asFunction<
        int Function(FPDF_DOCUMENT)
      >();

  /// Experimental API.
  /// Function: FPDF_GetTrailerEnds
  /// Get the byte offsets of trailer ends.
  /// Parameters:
  /// document    -   Handle to document. Returned by FPDF_LoadDocument().
  /// buffer      -   The address of a buffer that receives the
  /// byte offsets.
  /// length      -   The size, in ints, of |buffer|.
  /// Return value:
  /// Returns the number of ints in the buffer on success, 0 on error.
  ///
  /// |buffer| is an array of integers that describes the exact byte offsets of the
  /// trailer ends in the document. If |length| is less than the returned length,
  /// or |document| or |buffer| is NULL, |buffer| will not be modified.
  int FPDF_GetTrailerEnds(
    FPDF_DOCUMENT document,
    ffi.Pointer<ffi.UnsignedInt> buffer,
    int length,
  ) {
    return _FPDF_GetTrailerEnds(document, buffer, length);
  }

  late final _FPDF_GetTrailerEndsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            FPDF_DOCUMENT,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.UnsignedLong,
          )
        >
      >('FPDF_GetTrailerEnds');
  late final _FPDF_GetTrailerEnds =
      _FPDF_GetTrailerEndsPtr.asFunction<
        int Function(FPDF_DOCUMENT, ffi.Pointer<ffi.UnsignedInt>, int)
      >();

  /// Function: FPDF_GetDocPermissions
  /// Get file permission flags of the document.
  /// Parameters:
  /// document    -   Handle to a document. Returned by FPDF_LoadDocument.
  /// Return value:
  /// A 32-bit integer indicating permission flags. Please refer to the
  /// PDF Reference for detailed descriptions. If the document is not
  /// protected or was unlocked by the owner, 0xffffffff will be returned.
  int FPDF_GetDocPermissions(FPDF_DOCUMENT document) {
    return _FPDF_GetDocPermissions(document);
  }

  late final _FPDF_GetDocPermissionsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(FPDF_DOCUMENT)>>(
        'FPDF_GetDocPermissions',
      );
  late final _FPDF_GetDocPermissions =
      _FPDF_GetDocPermissionsPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_GetDocUserPermissions
  /// Get user file permission flags of the document.
  /// Parameters:
  /// document    -   Handle to a document. Returned by FPDF_LoadDocument.
  /// Return value:
  /// A 32-bit integer indicating permission flags. Please refer to the
  /// PDF Reference for detailed descriptions. If the document is not
  /// protected, 0xffffffff will be returned. Always returns user
  /// permissions, even if the document was unlocked by the owner.
  int FPDF_GetDocUserPermissions(FPDF_DOCUMENT document) {
    return _FPDF_GetDocUserPermissions(document);
  }

  late final _FPDF_GetDocUserPermissionsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(FPDF_DOCUMENT)>>(
        'FPDF_GetDocUserPermissions',
      );
  late final _FPDF_GetDocUserPermissions =
      _FPDF_GetDocUserPermissionsPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_GetSecurityHandlerRevision
  /// Get the revision for the security handler.
  /// Parameters:
  /// document    -   Handle to a document. Returned by FPDF_LoadDocument.
  /// Return value:
  /// The security handler revision number. Please refer to the PDF
  /// Reference for a detailed description. If the document is not
  /// protected, -1 will be returned.
  int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document) {
    return _FPDF_GetSecurityHandlerRevision(document);
  }

  late final _FPDF_GetSecurityHandlerRevisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'FPDF_GetSecurityHandlerRevision',
      );
  late final _FPDF_GetSecurityHandlerRevision =
      _FPDF_GetSecurityHandlerRevisionPtr.asFunction<
        int Function(FPDF_DOCUMENT)
      >();

  /// Function: FPDF_GetPageCount
  /// Get total number of pages in the document.
  /// Parameters:
  /// document    -   Handle to document. Returned by FPDF_LoadDocument.
  /// Return value:
  /// Total number of pages in the document.
  int FPDF_GetPageCount(FPDF_DOCUMENT document) {
    return _FPDF_GetPageCount(document);
  }

  late final _FPDF_GetPageCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'FPDF_GetPageCount',
      );
  late final _FPDF_GetPageCount =
      _FPDF_GetPageCountPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_LoadPage
  /// Load a page inside the document.
  /// Parameters:
  /// document    -   Handle to document. Returned by FPDF_LoadDocument
  /// page_index  -   Index number of the page. 0 for the first page.
  /// Return value:
  /// A handle to the loaded page, or NULL if page load fails.
  /// Comments:
  /// The loaded page can be rendered to devices using FPDF_RenderPage.
  /// The loaded page can be closed using FPDF_ClosePage.
  FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index) {
    return _FPDF_LoadPage(document, page_index);
  }

  late final _FPDF_LoadPagePtr =
      _lookup<ffi.NativeFunction<FPDF_PAGE Function(FPDF_DOCUMENT, ffi.Int)>>(
        'FPDF_LoadPage',
      );
  late final _FPDF_LoadPage =
      _FPDF_LoadPagePtr.asFunction<FPDF_PAGE Function(FPDF_DOCUMENT, int)>();

  /// Experimental API
  /// Function: FPDF_GetPageWidthF
  /// Get page width.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage().
  /// Return value:
  /// Page width (excluding non-displayable area) measured in points.
  /// One point is 1/72 inch (around 0.3528 mm).
  /// Comments:
  /// Changing the rotation of |page| affects the return value.
  double FPDF_GetPageWidthF(FPDF_PAGE page) {
    return _FPDF_GetPageWidthF(page);
  }

  late final _FPDF_GetPageWidthFPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(FPDF_PAGE)>>(
        'FPDF_GetPageWidthF',
      );
  late final _FPDF_GetPageWidthF =
      _FPDF_GetPageWidthFPtr.asFunction<double Function(FPDF_PAGE)>();

  /// Function: FPDF_GetPageWidth
  /// Get page width.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// Return value:
  /// Page width (excluding non-displayable area) measured in points.
  /// One point is 1/72 inch (around 0.3528 mm).
  /// Note:
  /// Prefer FPDF_GetPageWidthF() above. This will be deprecated in the
  /// future.
  /// Comments:
  /// Changing the rotation of |page| affects the return value.
  double FPDF_GetPageWidth(FPDF_PAGE page) {
    return _FPDF_GetPageWidth(page);
  }

  late final _FPDF_GetPageWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(FPDF_PAGE)>>(
        'FPDF_GetPageWidth',
      );
  late final _FPDF_GetPageWidth =
      _FPDF_GetPageWidthPtr.asFunction<double Function(FPDF_PAGE)>();

  /// Experimental API
  /// Function: FPDF_GetPageHeightF
  /// Get page height.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage().
  /// Return value:
  /// Page height (excluding non-displayable area) measured in points.
  /// One point is 1/72 inch (around 0.3528 mm)
  /// Comments:
  /// Changing the rotation of |page| affects the return value.
  double FPDF_GetPageHeightF(FPDF_PAGE page) {
    return _FPDF_GetPageHeightF(page);
  }

  late final _FPDF_GetPageHeightFPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(FPDF_PAGE)>>(
        'FPDF_GetPageHeightF',
      );
  late final _FPDF_GetPageHeightF =
      _FPDF_GetPageHeightFPtr.asFunction<double Function(FPDF_PAGE)>();

  /// Function: FPDF_GetPageHeight
  /// Get page height.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// Return value:
  /// Page height (excluding non-displayable area) measured in points.
  /// One point is 1/72 inch (around 0.3528 mm)
  /// Note:
  /// Prefer FPDF_GetPageHeightF() above. This will be deprecated in the
  /// future.
  /// Comments:
  /// Changing the rotation of |page| affects the return value.
  double FPDF_GetPageHeight(FPDF_PAGE page) {
    return _FPDF_GetPageHeight(page);
  }

  late final _FPDF_GetPageHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(FPDF_PAGE)>>(
        'FPDF_GetPageHeight',
      );
  late final _FPDF_GetPageHeight =
      _FPDF_GetPageHeightPtr.asFunction<double Function(FPDF_PAGE)>();

  /// Experimental API.
  /// Function: FPDF_GetPageBoundingBox
  /// Get the bounding box of the page. This is the intersection between
  /// its media box and its crop box.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// rect        -   Pointer to a rect to receive the page bounding box.
  /// On an error, |rect| won't be filled.
  /// Return value:
  /// True for success.
  int FPDF_GetPageBoundingBox(FPDF_PAGE page, ffi.Pointer<FS_RECTF> rect) {
    return _FPDF_GetPageBoundingBox(page, rect);
  }

  late final _FPDF_GetPageBoundingBoxPtr =
      _lookup<
        ffi.NativeFunction<FPDF_BOOL Function(FPDF_PAGE, ffi.Pointer<FS_RECTF>)>
      >('FPDF_GetPageBoundingBox');
  late final _FPDF_GetPageBoundingBox =
      _FPDF_GetPageBoundingBoxPtr.asFunction<
        int Function(FPDF_PAGE, ffi.Pointer<FS_RECTF>)
      >();

  /// Experimental API.
  /// Function: FPDF_GetPageSizeByIndexF
  /// Get the size of the page at the given index.
  /// Parameters:
  /// document    -   Handle to document. Returned by FPDF_LoadDocument().
  /// page_index  -   Page index, zero for the first page.
  /// size        -   Pointer to a FS_SIZEF to receive the page size.
  /// (in points).
  /// Return value:
  /// Non-zero for success. 0 for error (document or page not found).
  int FPDF_GetPageSizeByIndexF(
    FPDF_DOCUMENT document,
    int page_index,
    ffi.Pointer<FS_SIZEF> size,
  ) {
    return _FPDF_GetPageSizeByIndexF(document, page_index, size);
  }

  late final _FPDF_GetPageSizeByIndexFPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(FPDF_DOCUMENT, ffi.Int, ffi.Pointer<FS_SIZEF>)
        >
      >('FPDF_GetPageSizeByIndexF');
  late final _FPDF_GetPageSizeByIndexF =
      _FPDF_GetPageSizeByIndexFPtr.asFunction<
        int Function(FPDF_DOCUMENT, int, ffi.Pointer<FS_SIZEF>)
      >();

  /// Function: FPDF_GetPageSizeByIndex
  /// Get the size of the page at the given index.
  /// Parameters:
  /// document    -   Handle to document. Returned by FPDF_LoadDocument.
  /// page_index  -   Page index, zero for the first page.
  /// width       -   Pointer to a double to receive the page width
  /// (in points).
  /// height      -   Pointer to a double to receive the page height
  /// (in points).
  /// Return value:
  /// Non-zero for success. 0 for error (document or page not found).
  /// Note:
  /// Prefer FPDF_GetPageSizeByIndexF() above. This will be deprecated in
  /// the future.
  int FPDF_GetPageSizeByIndex(
    FPDF_DOCUMENT document,
    int page_index,
    ffi.Pointer<ffi.Double> width,
    ffi.Pointer<ffi.Double> height,
  ) {
    return _FPDF_GetPageSizeByIndex(document, page_index, width, height);
  }

  late final _FPDF_GetPageSizeByIndexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_DOCUMENT,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDF_GetPageSizeByIndex');
  late final _FPDF_GetPageSizeByIndex =
      _FPDF_GetPageSizeByIndexPtr.asFunction<
        int Function(
          FPDF_DOCUMENT,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Function: FPDF_RenderPageBitmap
  /// Render contents of a page to a device independent bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the device independent bitmap (as the
  /// output buffer). The bitmap handle can be created
  /// by FPDFBitmap_Create or retrieved from an image
  /// object by FPDFImageObj_GetBitmap.
  /// page        -   Handle to the page. Returned by FPDF_LoadPage
  /// start_x     -   Left pixel position of the display area in
  /// bitmap coordinates.
  /// start_y     -   Top pixel position of the display area in bitmap
  /// coordinates.
  /// size_x      -   Horizontal size (in pixels) for displaying the page.
  /// size_y      -   Vertical size (in pixels) for displaying the page.
  /// rotate      -   Page orientation:
  /// 0 (normal)
  /// 1 (rotated 90 degrees clockwise)
  /// 2 (rotated 180 degrees)
  /// 3 (rotated 90 degrees counter-clockwise)
  /// flags       -   0 for normal display, or combination of the Page
  /// Rendering flags defined above. With the FPDF_ANNOT
  /// flag, it renders all annotations that do not require
  /// user-interaction, which are all annotations except
  /// widget and popup annotations.
  /// Return value:
  /// None.
  void FPDF_RenderPageBitmap(
    FPDF_BITMAP bitmap,
    FPDF_PAGE page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
  ) {
    return _FPDF_RenderPageBitmap(
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
    );
  }

  late final _FPDF_RenderPageBitmapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            FPDF_BITMAP,
            FPDF_PAGE,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('FPDF_RenderPageBitmap');
  late final _FPDF_RenderPageBitmap =
      _FPDF_RenderPageBitmapPtr.asFunction<
        void Function(FPDF_BITMAP, FPDF_PAGE, int, int, int, int, int, int)
      >();

  /// Function: FPDF_RenderPageBitmapWithMatrix
  /// Render contents of a page to a device independent bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the device independent bitmap (as the
  /// output buffer). The bitmap handle can be created
  /// by FPDFBitmap_Create or retrieved by
  /// FPDFImageObj_GetBitmap.
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// matrix      -   The transform matrix, which must be invertible.
  /// See PDF Reference 1.7, 4.2.2 Common Transformations.
  /// clipping    -   The rect to clip to in device coords.
  /// flags       -   0 for normal display, or combination of the Page
  /// Rendering flags defined above. With the FPDF_ANNOT
  /// flag, it renders all annotations that do not require
  /// user-interaction, which are all annotations except
  /// widget and popup annotations.
  /// Return value:
  /// None. Note that behavior is undefined if det of |matrix| is 0.
  void FPDF_RenderPageBitmapWithMatrix(
    FPDF_BITMAP bitmap,
    FPDF_PAGE page,
    ffi.Pointer<FS_MATRIX> matrix,
    ffi.Pointer<FS_RECTF> clipping,
    int flags,
  ) {
    return _FPDF_RenderPageBitmapWithMatrix(
      bitmap,
      page,
      matrix,
      clipping,
      flags,
    );
  }

  late final _FPDF_RenderPageBitmapWithMatrixPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            FPDF_BITMAP,
            FPDF_PAGE,
            ffi.Pointer<FS_MATRIX>,
            ffi.Pointer<FS_RECTF>,
            ffi.Int,
          )
        >
      >('FPDF_RenderPageBitmapWithMatrix');
  late final _FPDF_RenderPageBitmapWithMatrix =
      _FPDF_RenderPageBitmapWithMatrixPtr.asFunction<
        void Function(
          FPDF_BITMAP,
          FPDF_PAGE,
          ffi.Pointer<FS_MATRIX>,
          ffi.Pointer<FS_RECTF>,
          int,
        )
      >();

  /// Function: FPDF_ClosePage
  /// Close a loaded PDF page.
  /// Parameters:
  /// page        -   Handle to the loaded page.
  /// Return value:
  /// None.
  void FPDF_ClosePage(FPDF_PAGE page) {
    return _FPDF_ClosePage(page);
  }

  late final _FPDF_ClosePagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_PAGE)>>(
        'FPDF_ClosePage',
      );
  late final _FPDF_ClosePage =
      _FPDF_ClosePagePtr.asFunction<void Function(FPDF_PAGE)>();

  /// Function: FPDF_CloseDocument
  /// Close a loaded PDF document.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// Return value:
  /// None.
  void FPDF_CloseDocument(FPDF_DOCUMENT document) {
    return _FPDF_CloseDocument(document);
  }

  late final _FPDF_CloseDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_DOCUMENT)>>(
        'FPDF_CloseDocument',
      );
  late final _FPDF_CloseDocument =
      _FPDF_CloseDocumentPtr.asFunction<void Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_DeviceToPage
  /// Convert the screen coordinates of a point to page coordinates.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// start_x     -   Left pixel position of the display area in
  /// device coordinates.
  /// start_y     -   Top pixel position of the display area in device
  /// coordinates.
  /// size_x      -   Horizontal size (in pixels) for displaying the page.
  /// size_y      -   Vertical size (in pixels) for displaying the page.
  /// rotate      -   Page orientation:
  /// 0 (normal)
  /// 1 (rotated 90 degrees clockwise)
  /// 2 (rotated 180 degrees)
  /// 3 (rotated 90 degrees counter-clockwise)
  /// device_x    -   X value in device coordinates to be converted.
  /// device_y    -   Y value in device coordinates to be converted.
  /// page_x      -   A pointer to a double receiving the converted X
  /// value in page coordinates.
  /// page_y      -   A pointer to a double receiving the converted Y
  /// value in page coordinates.
  /// Return value:
  /// Returns true if the conversion succeeds, and |page_x| and |page_y|
  /// successfully receives the converted coordinates.
  /// Comments:
  /// The page coordinate system has its origin at the left-bottom corner
  /// of the page, with the X-axis on the bottom going to the right, and
  /// the Y-axis on the left side going up.
  ///
  /// NOTE: this coordinate system can be altered when you zoom, scroll,
  /// or rotate a page, however, a point on the page should always have
  /// the same coordinate values in the page coordinate system.
  ///
  /// The device coordinate system is device dependent. For screen device,
  /// its origin is at the left-top corner of the window. However this
  /// origin can be altered by the Windows coordinate transformation
  /// utilities.
  ///
  /// You must make sure the start_x, start_y, size_x, size_y
  /// and rotate parameters have exactly same values as you used in
  /// the FPDF_RenderPage() function call.
  int FPDF_DeviceToPage(
    FPDF_PAGE page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int device_x,
    int device_y,
    ffi.Pointer<ffi.Double> page_x,
    ffi.Pointer<ffi.Double> page_y,
  ) {
    return _FPDF_DeviceToPage(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      device_x,
      device_y,
      page_x,
      page_y,
    );
  }

  late final _FPDF_DeviceToPagePtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_PAGE,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDF_DeviceToPage');
  late final _FPDF_DeviceToPage =
      _FPDF_DeviceToPagePtr.asFunction<
        int Function(
          FPDF_PAGE,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Function: FPDF_PageToDevice
  /// Convert the page coordinates of a point to screen coordinates.
  /// Parameters:
  /// page        -   Handle to the page. Returned by FPDF_LoadPage.
  /// start_x     -   Left pixel position of the display area in
  /// device coordinates.
  /// start_y     -   Top pixel position of the display area in device
  /// coordinates.
  /// size_x      -   Horizontal size (in pixels) for displaying the page.
  /// size_y      -   Vertical size (in pixels) for displaying the page.
  /// rotate      -   Page orientation:
  /// 0 (normal)
  /// 1 (rotated 90 degrees clockwise)
  /// 2 (rotated 180 degrees)
  /// 3 (rotated 90 degrees counter-clockwise)
  /// page_x      -   X value in page coordinates.
  /// page_y      -   Y value in page coordinate.
  /// device_x    -   A pointer to an integer receiving the result X
  /// value in device coordinates.
  /// device_y    -   A pointer to an integer receiving the result Y
  /// value in device coordinates.
  /// Return value:
  /// Returns true if the conversion succeeds, and |device_x| and
  /// |device_y| successfully receives the converted coordinates.
  /// Comments:
  /// See comments for FPDF_DeviceToPage().
  int FPDF_PageToDevice(
    FPDF_PAGE page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    double page_x,
    double page_y,
    ffi.Pointer<ffi.Int> device_x,
    ffi.Pointer<ffi.Int> device_y,
  ) {
    return _FPDF_PageToDevice(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      page_x,
      page_y,
      device_x,
      device_y,
    );
  }

  late final _FPDF_PageToDevicePtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_PAGE,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Double,
            ffi.Double,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('FPDF_PageToDevice');
  late final _FPDF_PageToDevice =
      _FPDF_PageToDevicePtr.asFunction<
        int Function(
          FPDF_PAGE,
          int,
          int,
          int,
          int,
          int,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  /// Function: FPDFBitmap_Create
  /// Create a device independent bitmap (FXDIB).
  /// Parameters:
  /// width       -   The number of pixels in width for the bitmap.
  /// Must be greater than 0.
  /// height      -   The number of pixels in height for the bitmap.
  /// Must be greater than 0.
  /// alpha       -   A flag indicating whether the alpha channel is used.
  /// Non-zero for using alpha, zero for not using.
  /// Return value:
  /// The created bitmap handle, or NULL if a parameter error or out of
  /// memory.
  /// Comments:
  /// The bitmap always uses 4 bytes per pixel. The first byte is always
  /// double word aligned.
  ///
  /// The byte order is BGRx (the last byte unused if no alpha channel) or
  /// BGRA.
  ///
  /// The pixels in a horizontal line are stored side by side, with the
  /// left most pixel stored first (with lower memory address).
  /// Each line uses width * 4 bytes.
  ///
  /// Lines are stored one after another, with the top most line stored
  /// first. There is no gap between adjacent lines.
  ///
  /// This function allocates enough memory for holding all pixels in the
  /// bitmap, but it doesn't initialize the buffer. Applications can use
  /// FPDFBitmap_FillRect() to fill the bitmap using any color. If the OS
  /// allows it, this function can allocate up to 4 GB of memory.
  FPDF_BITMAP FPDFBitmap_Create(int width, int height, int alpha) {
    return _FPDFBitmap_Create(width, height, alpha);
  }

  late final _FPDFBitmap_CreatePtr =
      _lookup<
        ffi.NativeFunction<FPDF_BITMAP Function(ffi.Int, ffi.Int, ffi.Int)>
      >('FPDFBitmap_Create');
  late final _FPDFBitmap_Create =
      _FPDFBitmap_CreatePtr.asFunction<FPDF_BITMAP Function(int, int, int)>();

  /// Function: FPDFBitmap_CreateEx
  /// Create a device independent bitmap (FXDIB)
  /// Parameters:
  /// width       -   The number of pixels in width for the bitmap.
  /// Must be greater than 0.
  /// height      -   The number of pixels in height for the bitmap.
  /// Must be greater than 0.
  /// format      -   A number indicating for bitmap format, as defined
  /// above.
  /// first_scan  -   A pointer to the first byte of the first line if
  /// using an external buffer. If this parameter is NULL,
  /// then a new buffer will be created.
  /// stride      -   Number of bytes for each scan line. The value must
  /// be 0 or greater. When the value is 0,
  /// FPDFBitmap_CreateEx() will automatically calculate
  /// the appropriate value using |width| and |format|.
  /// When using an external buffer, it is recommended for
  /// the caller to pass in the value.
  /// When not using an external buffer, it is recommended
  /// for the caller to pass in 0.
  /// Return value:
  /// The bitmap handle, or NULL if parameter error or out of memory.
  /// Comments:
  /// Similar to FPDFBitmap_Create function, but allows for more formats
  /// and an external buffer is supported. The bitmap created by this
  /// function can be used in any place that a FPDF_BITMAP handle is
  /// required.
  ///
  /// If an external buffer is used, then the caller should destroy the
  /// buffer. FPDFBitmap_Destroy() will not destroy the buffer.
  ///
  /// It is recommended to use FPDFBitmap_GetStride() to get the stride
  /// value.
  FPDF_BITMAP FPDFBitmap_CreateEx(
    int width,
    int height,
    int format,
    ffi.Pointer<ffi.Void> first_scan,
    int stride,
  ) {
    return _FPDFBitmap_CreateEx(width, height, format, first_scan, stride);
  }

  late final _FPDFBitmap_CreateExPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BITMAP Function(
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
            ffi.Int,
          )
        >
      >('FPDFBitmap_CreateEx');
  late final _FPDFBitmap_CreateEx =
      _FPDFBitmap_CreateExPtr.asFunction<
        FPDF_BITMAP Function(int, int, int, ffi.Pointer<ffi.Void>, int)
      >();

  /// Function: FPDFBitmap_GetFormat
  /// Get the format of the bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// The format of the bitmap.
  /// Comments:
  /// Only formats supported by FPDFBitmap_CreateEx are supported by this
  /// function; see the list of such formats above.
  int FPDFBitmap_GetFormat(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_GetFormat(bitmap);
  }

  late final _FPDFBitmap_GetFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_BITMAP)>>(
        'FPDFBitmap_GetFormat',
      );
  late final _FPDFBitmap_GetFormat =
      _FPDFBitmap_GetFormatPtr.asFunction<int Function(FPDF_BITMAP)>();

  /// Function: FPDFBitmap_FillRect
  /// Fill a rectangle in a bitmap.
  /// Parameters:
  /// bitmap      -   The handle to the bitmap. Returned by
  /// FPDFBitmap_Create.
  /// left        -   The left position. Starting from 0 at the
  /// left-most pixel.
  /// top         -   The top position. Starting from 0 at the
  /// top-most line.
  /// width       -   Width in pixels to be filled.
  /// height      -   Height in pixels to be filled.
  /// color       -   A 32-bit value specifing the color, in 8888 ARGB
  /// format.
  /// Return value:
  /// Returns whether the operation succeeded or not.
  /// Comments:
  /// This function sets the color and (optionally) alpha value in the
  /// specified region of the bitmap.
  ///
  /// NOTE: If the alpha channel is used, this function does NOT
  /// composite the background with the source color, instead the
  /// background will be replaced by the source color and the alpha.
  ///
  /// If the alpha channel is not used, the alpha parameter is ignored.
  int FPDFBitmap_FillRect(
    FPDF_BITMAP bitmap,
    int left,
    int top,
    int width,
    int height,
    int color,
  ) {
    return _FPDFBitmap_FillRect(bitmap, left, top, width, height, color);
  }

  late final _FPDFBitmap_FillRectPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_BITMAP,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            FPDF_DWORD,
          )
        >
      >('FPDFBitmap_FillRect');
  late final _FPDFBitmap_FillRect =
      _FPDFBitmap_FillRectPtr.asFunction<
        int Function(FPDF_BITMAP, int, int, int, int, int)
      >();

  /// Function: FPDFBitmap_GetBuffer
  /// Get data buffer of a bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// The pointer to the first byte of the bitmap buffer.
  /// Comments:
  /// The stride may be more than width * number of bytes per pixel
  ///
  /// Applications can use this function to get the bitmap buffer pointer,
  /// then manipulate any color and/or alpha values for any pixels in the
  /// bitmap.
  ///
  /// Use FPDFBitmap_GetFormat() to find out the format of the data.
  ffi.Pointer<ffi.Void> FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_GetBuffer(bitmap);
  }

  late final _FPDFBitmap_GetBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(FPDF_BITMAP)>>(
        'FPDFBitmap_GetBuffer',
      );
  late final _FPDFBitmap_GetBuffer =
      _FPDFBitmap_GetBufferPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(FPDF_BITMAP)
      >();

  /// Function: FPDFBitmap_GetWidth
  /// Get width of a bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// The width of the bitmap in pixels.
  int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_GetWidth(bitmap);
  }

  late final _FPDFBitmap_GetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_BITMAP)>>(
        'FPDFBitmap_GetWidth',
      );
  late final _FPDFBitmap_GetWidth =
      _FPDFBitmap_GetWidthPtr.asFunction<int Function(FPDF_BITMAP)>();

  /// Function: FPDFBitmap_GetHeight
  /// Get height of a bitmap.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// The height of the bitmap in pixels.
  int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_GetHeight(bitmap);
  }

  late final _FPDFBitmap_GetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_BITMAP)>>(
        'FPDFBitmap_GetHeight',
      );
  late final _FPDFBitmap_GetHeight =
      _FPDFBitmap_GetHeightPtr.asFunction<int Function(FPDF_BITMAP)>();

  /// Function: FPDFBitmap_GetStride
  /// Get number of bytes for each line in the bitmap buffer.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// The number of bytes for each line in the bitmap buffer.
  /// Comments:
  /// The stride may be more than width * number of bytes per pixel.
  int FPDFBitmap_GetStride(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_GetStride(bitmap);
  }

  late final _FPDFBitmap_GetStridePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_BITMAP)>>(
        'FPDFBitmap_GetStride',
      );
  late final _FPDFBitmap_GetStride =
      _FPDFBitmap_GetStridePtr.asFunction<int Function(FPDF_BITMAP)>();

  /// Function: FPDFBitmap_Destroy
  /// Destroy a bitmap and release all related buffers.
  /// Parameters:
  /// bitmap      -   Handle to the bitmap. Returned by FPDFBitmap_Create
  /// or FPDFImageObj_GetBitmap.
  /// Return value:
  /// None.
  /// Comments:
  /// This function will not destroy any external buffers provided when
  /// the bitmap was created.
  void FPDFBitmap_Destroy(FPDF_BITMAP bitmap) {
    return _FPDFBitmap_Destroy(bitmap);
  }

  late final _FPDFBitmap_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_BITMAP)>>(
        'FPDFBitmap_Destroy',
      );
  late final _FPDFBitmap_Destroy =
      _FPDFBitmap_DestroyPtr.asFunction<void Function(FPDF_BITMAP)>();

  /// Function: FPDF_VIEWERREF_GetPrintScaling
  /// Whether the PDF document prefers to be scaled or not.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// Return value:
  /// None.
  int FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document) {
    return _FPDF_VIEWERREF_GetPrintScaling(document);
  }

  late final _FPDF_VIEWERREF_GetPrintScalingPtr =
      _lookup<ffi.NativeFunction<FPDF_BOOL Function(FPDF_DOCUMENT)>>(
        'FPDF_VIEWERREF_GetPrintScaling',
      );
  late final _FPDF_VIEWERREF_GetPrintScaling =
      _FPDF_VIEWERREF_GetPrintScalingPtr.asFunction<
        int Function(FPDF_DOCUMENT)
      >();

  /// Function: FPDF_VIEWERREF_GetNumCopies
  /// Returns the number of copies to be printed.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// Return value:
  /// The number of copies to be printed.
  int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document) {
    return _FPDF_VIEWERREF_GetNumCopies(document);
  }

  late final _FPDF_VIEWERREF_GetNumCopiesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'FPDF_VIEWERREF_GetNumCopies',
      );
  late final _FPDF_VIEWERREF_GetNumCopies =
      _FPDF_VIEWERREF_GetNumCopiesPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_VIEWERREF_GetPrintPageRange
  /// Page numbers to initialize print dialog box when file is printed.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// Return value:
  /// The print page range to be used for printing.
  FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document) {
    return _FPDF_VIEWERREF_GetPrintPageRange(document);
  }

  late final _FPDF_VIEWERREF_GetPrintPageRangePtr =
      _lookup<ffi.NativeFunction<FPDF_PAGERANGE Function(FPDF_DOCUMENT)>>(
        'FPDF_VIEWERREF_GetPrintPageRange',
      );
  late final _FPDF_VIEWERREF_GetPrintPageRange =
      _FPDF_VIEWERREF_GetPrintPageRangePtr.asFunction<
        FPDF_PAGERANGE Function(FPDF_DOCUMENT)
      >();

  /// Experimental API.
  /// Function: FPDF_VIEWERREF_GetPrintPageRangeCount
  /// Returns the number of elements in a FPDF_PAGERANGE.
  /// Parameters:
  /// pagerange   -   Handle to the page range.
  /// Return value:
  /// The number of elements in the page range. Returns 0 on error.
  int FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange) {
    return _FPDF_VIEWERREF_GetPrintPageRangeCount(pagerange);
  }

  late final _FPDF_VIEWERREF_GetPrintPageRangeCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(FPDF_PAGERANGE)>>(
        'FPDF_VIEWERREF_GetPrintPageRangeCount',
      );
  late final _FPDF_VIEWERREF_GetPrintPageRangeCount =
      _FPDF_VIEWERREF_GetPrintPageRangeCountPtr.asFunction<
        int Function(FPDF_PAGERANGE)
      >();

  /// Experimental API.
  /// Function: FPDF_VIEWERREF_GetPrintPageRangeElement
  /// Returns an element from a FPDF_PAGERANGE.
  /// Parameters:
  /// pagerange   -   Handle to the page range.
  /// index       -   Index of the element.
  /// Return value:
  /// The value of the element in the page range at a given index.
  /// Returns -1 on error.
  int FPDF_VIEWERREF_GetPrintPageRangeElement(
    FPDF_PAGERANGE pagerange,
    int index,
  ) {
    return _FPDF_VIEWERREF_GetPrintPageRangeElement(pagerange, index);
  }

  late final _FPDF_VIEWERREF_GetPrintPageRangeElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_PAGERANGE, ffi.Size)>>(
        'FPDF_VIEWERREF_GetPrintPageRangeElement',
      );
  late final _FPDF_VIEWERREF_GetPrintPageRangeElement =
      _FPDF_VIEWERREF_GetPrintPageRangeElementPtr.asFunction<
        int Function(FPDF_PAGERANGE, int)
      >();

  /// Function: FPDF_VIEWERREF_GetDuplex
  /// Returns the paper handling option to be used when printing from
  /// the print dialog.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// Return value:
  /// The paper handling option to be used when printing.
  _FPDF_DUPLEXTYPE_ FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document) {
    return _FPDF_DUPLEXTYPE_.fromValue(_FPDF_VIEWERREF_GetDuplex(document));
  }

  late final _FPDF_VIEWERREF_GetDuplexPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(FPDF_DOCUMENT)>>(
        'FPDF_VIEWERREF_GetDuplex',
      );
  late final _FPDF_VIEWERREF_GetDuplex =
      _FPDF_VIEWERREF_GetDuplexPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_VIEWERREF_GetName
  /// Gets the contents for a viewer ref, with a given key. The value must
  /// be of type "name".
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// key         -   Name of the key in the viewer pref dictionary,
  /// encoded in UTF-8.
  /// buffer      -   Caller-allocate buffer to receive the key, or NULL
  /// -   to query the required length.
  /// length      -   Length of the buffer.
  /// Return value:
  /// The number of bytes in the contents, including the NULL terminator.
  /// Thus if the return value is 0, then that indicates an error, such
  /// as when |document| is invalid. If |length| is less than the required
  /// length, or |buffer| is NULL, |buffer| will not be modified.
  int FPDF_VIEWERREF_GetName(
    FPDF_DOCUMENT document,
    FPDF_BYTESTRING key,
    ffi.Pointer<ffi.Char> buffer,
    int length,
  ) {
    return _FPDF_VIEWERREF_GetName(document, key, buffer, length);
  }

  late final _FPDF_VIEWERREF_GetNamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            FPDF_DOCUMENT,
            FPDF_BYTESTRING,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedLong,
          )
        >
      >('FPDF_VIEWERREF_GetName');
  late final _FPDF_VIEWERREF_GetName =
      _FPDF_VIEWERREF_GetNamePtr.asFunction<
        int Function(FPDF_DOCUMENT, FPDF_BYTESTRING, ffi.Pointer<ffi.Char>, int)
      >();

  /// Function: FPDF_CountNamedDests
  /// Get the count of named destinations in the PDF document.
  /// Parameters:
  /// document    -   Handle to a document
  /// Return value:
  /// The count of named destinations.
  int FPDF_CountNamedDests(FPDF_DOCUMENT document) {
    return _FPDF_CountNamedDests(document);
  }

  late final _FPDF_CountNamedDestsPtr =
      _lookup<ffi.NativeFunction<FPDF_DWORD Function(FPDF_DOCUMENT)>>(
        'FPDF_CountNamedDests',
      );
  late final _FPDF_CountNamedDests =
      _FPDF_CountNamedDestsPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Function: FPDF_GetNamedDestByName
  /// Get a the destination handle for the given name.
  /// Parameters:
  /// document    -   Handle to the loaded document.
  /// name        -   The name of a destination.
  /// Return value:
  /// The handle to the destination.
  FPDF_DEST FPDF_GetNamedDestByName(
    FPDF_DOCUMENT document,
    FPDF_BYTESTRING name,
  ) {
    return _FPDF_GetNamedDestByName(document, name);
  }

  late final _FPDF_GetNamedDestByNamePtr =
      _lookup<
        ffi.NativeFunction<FPDF_DEST Function(FPDF_DOCUMENT, FPDF_BYTESTRING)>
      >('FPDF_GetNamedDestByName');
  late final _FPDF_GetNamedDestByName =
      _FPDF_GetNamedDestByNamePtr.asFunction<
        FPDF_DEST Function(FPDF_DOCUMENT, FPDF_BYTESTRING)
      >();

  /// Function: FPDF_GetNamedDest
  /// Get the named destination by index.
  /// Parameters:
  /// document        -   Handle to a document
  /// index           -   The index of a named destination.
  /// buffer          -   The buffer to store the destination name,
  /// used as wchar_t*.
  /// buflen [in/out] -   Size of the buffer in bytes on input,
  /// length of the result in bytes on output
  /// or -1 if the buffer is too small.
  /// Return value:
  /// The destination handle for a given index, or NULL if there is no
  /// named destination corresponding to |index|.
  /// Comments:
  /// Call this function twice to get the name of the named destination:
  /// 1) First time pass in |buffer| as NULL and get buflen.
  /// 2) Second time pass in allocated |buffer| and buflen to retrieve
  /// |buffer|, which should be used as wchar_t*.
  ///
  /// If buflen is not sufficiently large, it will be set to -1 upon
  /// return.
  FPDF_DEST FPDF_GetNamedDest(
    FPDF_DOCUMENT document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Long> buflen,
  ) {
    return _FPDF_GetNamedDest(document, index, buffer, buflen);
  }

  late final _FPDF_GetNamedDestPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_DEST Function(
            FPDF_DOCUMENT,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Long>,
          )
        >
      >('FPDF_GetNamedDest');
  late final _FPDF_GetNamedDest =
      _FPDF_GetNamedDestPtr.asFunction<
        FPDF_DEST Function(
          FPDF_DOCUMENT,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Long>,
        )
      >();

  /// Experimental API.
  /// Function: FPDF_GetXFAPacketCount
  /// Get the number of valid packets in the XFA entry.
  /// Parameters:
  /// document - Handle to the document.
  /// Return value:
  /// The number of valid packets, or -1 on error.
  int FPDF_GetXFAPacketCount(FPDF_DOCUMENT document) {
    return _FPDF_GetXFAPacketCount(document);
  }

  late final _FPDF_GetXFAPacketCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'FPDF_GetXFAPacketCount',
      );
  late final _FPDF_GetXFAPacketCount =
      _FPDF_GetXFAPacketCountPtr.asFunction<int Function(FPDF_DOCUMENT)>();

  /// Experimental API.
  /// Function: FPDF_GetXFAPacketName
  /// Get the name of a packet in the XFA array.
  /// Parameters:
  /// document - Handle to the document.
  /// index    - Index number of the packet. 0 for the first packet.
  /// buffer   - Buffer for holding the name of the XFA packet.
  /// buflen   - Length of |buffer| in bytes.
  /// Return value:
  /// The length of the packet name in bytes, or 0 on error.
  ///
  /// |document| must be valid and |index| must be in the range [0, N), where N is
  /// the value returned by FPDF_GetXFAPacketCount().
  /// |buffer| is only modified if it is non-NULL and |buflen| is greater than or
  /// equal to the length of the packet name. The packet name includes a
  /// terminating NUL character. |buffer| is unmodified on error.
  int FPDF_GetXFAPacketName(
    FPDF_DOCUMENT document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    return _FPDF_GetXFAPacketName(document, index, buffer, buflen);
  }

  late final _FPDF_GetXFAPacketNamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            FPDF_DOCUMENT,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedLong,
          )
        >
      >('FPDF_GetXFAPacketName');
  late final _FPDF_GetXFAPacketName =
      _FPDF_GetXFAPacketNamePtr.asFunction<
        int Function(FPDF_DOCUMENT, int, ffi.Pointer<ffi.Void>, int)
      >();

  /// Experimental API.
  /// Function: FPDF_GetXFAPacketContent
  /// Get the content of a packet in the XFA array.
  /// Parameters:
  /// document   - Handle to the document.
  /// index      - Index number of the packet. 0 for the first packet.
  /// buffer     - Buffer for holding the content of the XFA packet.
  /// buflen     - Length of |buffer| in bytes.
  /// out_buflen - Pointer to the variable that will receive the minimum
  /// buffer size needed to contain the content of the XFA
  /// packet.
  /// Return value:
  /// Whether the operation succeeded or not.
  ///
  /// |document| must be valid and |index| must be in the range [0, N), where N is
  /// the value returned by FPDF_GetXFAPacketCount(). |out_buflen| must not be
  /// NULL. When the aforementioned arguments are valid, the operation succeeds,
  /// and |out_buflen| receives the content size. |buffer| is only modified if
  /// |buffer| is non-null and long enough to contain the content. Callers must
  /// check both the return value and the input |buflen| is no less than the
  /// returned |out_buflen| before using the data in |buffer|.
  int FPDF_GetXFAPacketContent(
    FPDF_DOCUMENT document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.UnsignedLong> out_buflen,
  ) {
    return _FPDF_GetXFAPacketContent(
      document,
      index,
      buffer,
      buflen,
      out_buflen,
    );
  }

  late final _FPDF_GetXFAPacketContentPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_DOCUMENT,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedLong,
            ffi.Pointer<ffi.UnsignedLong>,
          )
        >
      >('FPDF_GetXFAPacketContent');
  late final _FPDF_GetXFAPacketContent =
      _FPDF_GetXFAPacketContentPtr.asFunction<
        int Function(
          FPDF_DOCUMENT,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
        )
      >();

  /// Function: FPDFText_LoadPage
  /// Prepare information about all characters in a page.
  /// Parameters:
  /// page    -   Handle to the page. Returned by FPDF_LoadPage function
  /// (in FPDFVIEW module).
  /// Return value:
  /// A handle to the text page information structure.
  /// NULL if something goes wrong.
  /// Comments:
  /// Application must call FPDFText_ClosePage to release the text page
  /// information.
  FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page) {
    return _FPDFText_LoadPage(page);
  }

  late final _FPDFText_LoadPagePtr =
      _lookup<ffi.NativeFunction<FPDF_TEXTPAGE Function(FPDF_PAGE)>>(
        'FPDFText_LoadPage',
      );
  late final _FPDFText_LoadPage =
      _FPDFText_LoadPagePtr.asFunction<FPDF_TEXTPAGE Function(FPDF_PAGE)>();

  /// Function: FPDFText_ClosePage
  /// Release all resources allocated for a text page information
  /// structure.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// Return Value:
  /// None.
  void FPDFText_ClosePage(FPDF_TEXTPAGE text_page) {
    return _FPDFText_ClosePage(text_page);
  }

  late final _FPDFText_ClosePagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_TEXTPAGE)>>(
        'FPDFText_ClosePage',
      );
  late final _FPDFText_ClosePage =
      _FPDFText_ClosePagePtr.asFunction<void Function(FPDF_TEXTPAGE)>();

  /// Function: FPDFText_CountChars
  /// Get number of characters in a page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// Return value:
  /// Number of characters in the page. Return -1 for error.
  /// Generated characters, like additional space characters, new line
  /// characters, are also counted.
  /// Comments:
  /// Characters in a page form a "stream", inside the stream, each
  /// character has an index.
  /// We will use the index parameters in many of FPDFTEXT functions. The
  /// first character in the page
  /// has an index value of zero.
  int FPDFText_CountChars(FPDF_TEXTPAGE text_page) {
    return _FPDFText_CountChars(text_page);
  }

  late final _FPDFText_CountCharsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE)>>(
        'FPDFText_CountChars',
      );
  late final _FPDFText_CountChars =
      _FPDFText_CountCharsPtr.asFunction<int Function(FPDF_TEXTPAGE)>();

  /// Function: FPDFText_GetUnicode
  /// Get Unicode of a character in a page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// The Unicode of the particular character.
  /// If a character is not encoded in Unicode and Foxit engine can't
  /// convert to Unicode,
  /// the return value will be zero.
  int FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_GetUnicode(text_page, index);
  }

  late final _FPDFText_GetUnicodePtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(FPDF_TEXTPAGE, ffi.Int)>
      >('FPDFText_GetUnicode');
  late final _FPDFText_GetUnicode =
      _FPDFText_GetUnicodePtr.asFunction<int Function(FPDF_TEXTPAGE, int)>();

  /// Experimental API.
  /// Function: FPDFText_GetTextObject
  /// Get the FPDF_PAGEOBJECT associated with a given character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// The associated text object for the character at |index|, or NULL on
  /// error. The returned text object, if non-null, is of type
  /// |FPDF_PAGEOBJ_TEXT|. The caller does not own the returned object.
  FPDF_PAGEOBJECT FPDFText_GetTextObject(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_GetTextObject(text_page, index);
  }

  late final _FPDFText_GetTextObjectPtr =
      _lookup<
        ffi.NativeFunction<FPDF_PAGEOBJECT Function(FPDF_TEXTPAGE, ffi.Int)>
      >('FPDFText_GetTextObject');
  late final _FPDFText_GetTextObject =
      _FPDFText_GetTextObjectPtr.asFunction<
        FPDF_PAGEOBJECT Function(FPDF_TEXTPAGE, int)
      >();

  /// Experimental API.
  /// Function: FPDFText_IsGenerated
  /// Get if a character in a page is generated by PDFium.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// 1 if the character is generated by PDFium.
  /// 0 if the character is not generated by PDFium.
  /// -1 if there was an error.
  int FPDFText_IsGenerated(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_IsGenerated(text_page, index);
  }

  late final _FPDFText_IsGeneratedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_IsGenerated',
      );
  late final _FPDFText_IsGenerated =
      _FPDFText_IsGeneratedPtr.asFunction<int Function(FPDF_TEXTPAGE, int)>();

  /// Experimental API.
  /// Function: FPDFText_IsHyphen
  /// Get if a character in a page is a hyphen.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// 1 if the character is a hyphen.
  /// 0 if the character is not a hyphen.
  /// -1 if there was an error.
  int FPDFText_IsHyphen(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_IsHyphen(text_page, index);
  }

  late final _FPDFText_IsHyphenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_IsHyphen',
      );
  late final _FPDFText_IsHyphen =
      _FPDFText_IsHyphenPtr.asFunction<int Function(FPDF_TEXTPAGE, int)>();

  /// Experimental API.
  /// Function: FPDFText_HasUnicodeMapError
  /// Get if a character in a page has an invalid unicode mapping.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// 1 if the character has an invalid unicode mapping.
  /// 0 if the character has no known unicode mapping issues.
  /// -1 if there was an error.
  int FPDFText_HasUnicodeMapError(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_HasUnicodeMapError(text_page, index);
  }

  late final _FPDFText_HasUnicodeMapErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_HasUnicodeMapError',
      );
  late final _FPDFText_HasUnicodeMapError =
      _FPDFText_HasUnicodeMapErrorPtr.asFunction<
        int Function(FPDF_TEXTPAGE, int)
      >();

  /// Function: FPDFText_GetFontSize
  /// Get the font size of a particular character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// The font size of the particular character, measured in points (about
  /// 1/72 inch). This is the typographic size of the font (so called
  /// "em size").
  double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_GetFontSize(text_page, index);
  }

  late final _FPDFText_GetFontSizePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_GetFontSize',
      );
  late final _FPDFText_GetFontSize =
      _FPDFText_GetFontSizePtr.asFunction<
        double Function(FPDF_TEXTPAGE, int)
      >();

  /// Experimental API.
  /// Function: FPDFText_GetFontInfo
  /// Get the font name and flags of a particular character.
  /// Parameters:
  /// text_page - Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index     - Zero-based index of the character.
  /// buffer    - A buffer receiving the font name.
  /// buflen    - The length of |buffer| in bytes.
  /// flags     - Optional pointer to an int receiving the font flags.
  /// These flags should be interpreted per PDF spec 1.7
  /// Section 5.7.1 Font Descriptor Flags.
  /// Return value:
  /// On success, return the length of the font name, including the
  /// trailing NUL character, in bytes. If this length is less than or
  /// equal to |length|, |buffer| is set to the font name, |flags| is
  /// set to the font flags. |buffer| is in UTF-8 encoding. Return 0 on
  /// failure.
  int FPDFText_GetFontInfo(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _FPDFText_GetFontInfo(text_page, index, buffer, buflen, flags);
  }

  late final _FPDFText_GetFontInfoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedLong,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('FPDFText_GetFontInfo');
  late final _FPDFText_GetFontInfo =
      _FPDFText_GetFontInfoPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Int>,
        )
      >();

  /// Experimental API.
  /// Function: FPDFText_GetFontWeight
  /// Get the font weight of a particular character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return value:
  /// On success, return the font weight of the particular character. If
  /// |text_page| is invalid, if |index| is out of bounds, or if the
  /// character's text object is undefined, return -1.
  int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_GetFontWeight(text_page, index);
  }

  late final _FPDFText_GetFontWeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_GetFontWeight',
      );
  late final _FPDFText_GetFontWeight =
      _FPDFText_GetFontWeightPtr.asFunction<int Function(FPDF_TEXTPAGE, int)>();

  /// Experimental API.
  /// Function: FPDFText_GetFillColor
  /// Get the fill color of a particular character.
  /// Parameters:
  /// text_page      -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index          -   Zero-based index of the character.
  /// R              -   Pointer to an unsigned int number receiving the
  /// red value of the fill color.
  /// G              -   Pointer to an unsigned int number receiving the
  /// green value of the fill color.
  /// B              -   Pointer to an unsigned int number receiving the
  /// blue value of the fill color.
  /// A              -   Pointer to an unsigned int number receiving the
  /// alpha value of the fill color.
  /// Return value:
  /// Whether the call succeeded. If false, |R|, |G|, |B| and |A| are
  /// unchanged.
  int FPDFText_GetFillColor(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<ffi.UnsignedInt> R,
    ffi.Pointer<ffi.UnsignedInt> G,
    ffi.Pointer<ffi.UnsignedInt> B,
    ffi.Pointer<ffi.UnsignedInt> A,
  ) {
    return _FPDFText_GetFillColor(text_page, index, R, G, B, A);
  }

  late final _FPDFText_GetFillColorPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('FPDFText_GetFillColor');
  late final _FPDFText_GetFillColor =
      _FPDFText_GetFillColorPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  /// Experimental API.
  /// Function: FPDFText_GetStrokeColor
  /// Get the stroke color of a particular character.
  /// Parameters:
  /// text_page      -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index          -   Zero-based index of the character.
  /// R              -   Pointer to an unsigned int number receiving the
  /// red value of the stroke color.
  /// G              -   Pointer to an unsigned int number receiving the
  /// green value of the stroke color.
  /// B              -   Pointer to an unsigned int number receiving the
  /// blue value of the stroke color.
  /// A              -   Pointer to an unsigned int number receiving the
  /// alpha value of the stroke color.
  /// Return value:
  /// Whether the call succeeded. If false, |R|, |G|, |B| and |A| are
  /// unchanged.
  int FPDFText_GetStrokeColor(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<ffi.UnsignedInt> R,
    ffi.Pointer<ffi.UnsignedInt> G,
    ffi.Pointer<ffi.UnsignedInt> B,
    ffi.Pointer<ffi.UnsignedInt> A,
  ) {
    return _FPDFText_GetStrokeColor(text_page, index, R, G, B, A);
  }

  late final _FPDFText_GetStrokeColorPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('FPDFText_GetStrokeColor');
  late final _FPDFText_GetStrokeColor =
      _FPDFText_GetStrokeColorPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  /// Experimental API.
  /// Function: FPDFText_GetCharAngle
  /// Get character rotation angle.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// Return Value:
  /// On success, return the angle value in radian. Value will always be
  /// greater or equal to 0. If |text_page| is invalid, or if |index| is
  /// out of bounds, then return -1.
  double FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index) {
    return _FPDFText_GetCharAngle(text_page, index);
  }

  late final _FPDFText_GetCharAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(FPDF_TEXTPAGE, ffi.Int)>>(
        'FPDFText_GetCharAngle',
      );
  late final _FPDFText_GetCharAngle =
      _FPDFText_GetCharAnglePtr.asFunction<
        double Function(FPDF_TEXTPAGE, int)
      >();

  /// Function: FPDFText_GetCharBox
  /// Get bounding box of a particular character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// left        -   Pointer to a double number receiving left position
  /// of the character box.
  /// right       -   Pointer to a double number receiving right position
  /// of the character box.
  /// bottom      -   Pointer to a double number receiving bottom position
  /// of the character box.
  /// top         -   Pointer to a double number receiving top position of
  /// the character box.
  /// Return Value:
  /// On success, return TRUE and fill in |left|, |right|, |bottom|, and
  /// |top|. If |text_page| is invalid, or if |index| is out of bounds,
  /// then return FALSE, and the out parameters remain unmodified.
  /// Comments:
  /// All positions are measured in PDF "user space".
  int FPDFText_GetCharBox(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
    ffi.Pointer<ffi.Double> top,
  ) {
    return _FPDFText_GetCharBox(text_page, index, left, right, bottom, top);
  }

  late final _FPDFText_GetCharBoxPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDFText_GetCharBox');
  late final _FPDFText_GetCharBox =
      _FPDFText_GetCharBoxPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Experimental API.
  /// Function: FPDFText_GetLooseCharBox
  /// Get a "loose" bounding box of a particular character, i.e., covering
  /// the entire glyph bounds, without taking the actual glyph shape into
  /// account.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// rect        -   Pointer to a FS_RECTF receiving the character box.
  /// Return Value:
  /// On success, return TRUE and fill in |rect|. If |text_page| is
  /// invalid, or if |index| is out of bounds, then return FALSE, and the
  /// |rect| out parameter remains unmodified.
  /// Comments:
  /// All positions are measured in PDF "user space".
  int FPDFText_GetLooseCharBox(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    return _FPDFText_GetLooseCharBox(text_page, index, rect);
  }

  late final _FPDFText_GetLooseCharBoxPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(FPDF_TEXTPAGE, ffi.Int, ffi.Pointer<FS_RECTF>)
        >
      >('FPDFText_GetLooseCharBox');
  late final _FPDFText_GetLooseCharBox =
      _FPDFText_GetLooseCharBoxPtr.asFunction<
        int Function(FPDF_TEXTPAGE, int, ffi.Pointer<FS_RECTF>)
      >();

  /// Experimental API.
  /// Function: FPDFText_GetMatrix
  /// Get the effective transformation matrix for a particular character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage().
  /// index       -   Zero-based index of the character.
  /// matrix      -   Pointer to a FS_MATRIX receiving the transformation
  /// matrix.
  /// Return Value:
  /// On success, return TRUE and fill in |matrix|. If |text_page| is
  /// invalid, or if |index| is out of bounds, or if |matrix| is NULL,
  /// then return FALSE, and |matrix| remains unmodified.
  int FPDFText_GetMatrix(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    return _FPDFText_GetMatrix(text_page, index, matrix);
  }

  late final _FPDFText_GetMatrixPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(FPDF_TEXTPAGE, ffi.Int, ffi.Pointer<FS_MATRIX>)
        >
      >('FPDFText_GetMatrix');
  late final _FPDFText_GetMatrix =
      _FPDFText_GetMatrixPtr.asFunction<
        int Function(FPDF_TEXTPAGE, int, ffi.Pointer<FS_MATRIX>)
      >();

  /// Function: FPDFText_GetCharOrigin
  /// Get origin of a particular character.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// index       -   Zero-based index of the character.
  /// x           -   Pointer to a double number receiving x coordinate of
  /// the character origin.
  /// y           -   Pointer to a double number receiving y coordinate of
  /// the character origin.
  /// Return Value:
  /// Whether the call succeeded. If false, x and y are unchanged.
  /// Comments:
  /// All positions are measured in PDF "user space".
  int FPDFText_GetCharOrigin(
    FPDF_TEXTPAGE text_page,
    int index,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _FPDFText_GetCharOrigin(text_page, index, x, y);
  }

  late final _FPDFText_GetCharOriginPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDFText_GetCharOrigin');
  late final _FPDFText_GetCharOrigin =
      _FPDFText_GetCharOriginPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Function: FPDFText_GetCharIndexAtPos
  /// Get the index of a character at or nearby a certain position on the
  /// page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// x           -   X position in PDF "user space".
  /// y           -   Y position in PDF "user space".
  /// xTolerance  -   An x-axis tolerance value for character hit
  /// detection, in point units.
  /// yTolerance  -   A y-axis tolerance value for character hit
  /// detection, in point units.
  /// Return Value:
  /// The zero-based index of the character at, or nearby the point (x,y).
  /// If there is no character at or nearby the point, return value will
  /// be -1. If an error occurs, -3 will be returned.
  int FPDFText_GetCharIndexAtPos(
    FPDF_TEXTPAGE text_page,
    double x,
    double y,
    double xTolerance,
    double yTolerance,
  ) {
    return _FPDFText_GetCharIndexAtPos(text_page, x, y, xTolerance, yTolerance);
  }

  late final _FPDFText_GetCharIndexAtPosPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_TEXTPAGE,
            ffi.Double,
            ffi.Double,
            ffi.Double,
            ffi.Double,
          )
        >
      >('FPDFText_GetCharIndexAtPos');
  late final _FPDFText_GetCharIndexAtPos =
      _FPDFText_GetCharIndexAtPosPtr.asFunction<
        int Function(FPDF_TEXTPAGE, double, double, double, double)
      >();

  /// Function: FPDFText_GetText
  /// Extract unicode text string from the page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// start_index -   Index for the start characters.
  /// count       -   Number of UCS-2 values to be extracted.
  /// result      -   A buffer (allocated by application) receiving the
  /// extracted UCS-2 values. The buffer must be able to
  /// hold `count` UCS-2 values plus a terminator.
  /// Return Value:
  /// Number of characters written into the result buffer, including the
  /// trailing terminator.
  /// Comments:
  /// This function ignores characters without UCS-2 representations.
  /// It considers all characters on the page, even those that are not
  /// visible when the page has a cropbox. To filter out the characters
  /// outside of the cropbox, use FPDF_GetPageBoundingBox() and
  /// FPDFText_GetCharBox().
  int FPDFText_GetText(
    FPDF_TEXTPAGE text_page,
    int start_index,
    int count,
    ffi.Pointer<ffi.UnsignedShort> result,
  ) {
    return _FPDFText_GetText(text_page, start_index, count, result);
  }

  late final _FPDFText_GetTextPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedShort>,
          )
        >
      >('FPDFText_GetText');
  late final _FPDFText_GetText =
      _FPDFText_GetTextPtr.asFunction<
        int Function(FPDF_TEXTPAGE, int, int, ffi.Pointer<ffi.UnsignedShort>)
      >();

  /// Function: FPDFText_CountRects
  /// Counts number of rectangular areas occupied by a segment of text,
  /// and caches the result for subsequent FPDFText_GetRect() calls.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// start_index -   Index for the start character.
  /// count       -   Number of characters, or -1 for all remaining.
  /// Return value:
  /// Number of rectangles, 0 if text_page is null, or -1 on bad
  /// start_index.
  /// Comments:
  /// This function, along with FPDFText_GetRect can be used by
  /// applications to detect the position on the page for a text segment,
  /// so proper areas can be highlighted. The FPDFText_* functions will
  /// automatically merge small character boxes into bigger one if those
  /// characters are on the same line and use same font settings.
  int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count) {
    return _FPDFText_CountRects(text_page, start_index, count);
  }

  late final _FPDFText_CountRectsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(FPDF_TEXTPAGE, ffi.Int, ffi.Int)>
      >('FPDFText_CountRects');
  late final _FPDFText_CountRects =
      _FPDFText_CountRectsPtr.asFunction<
        int Function(FPDF_TEXTPAGE, int, int)
      >();

  /// Function: FPDFText_GetRect
  /// Get a rectangular area from the result generated by
  /// FPDFText_CountRects.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// rect_index  -   Zero-based index for the rectangle.
  /// left        -   Pointer to a double value receiving the rectangle
  /// left boundary.
  /// top         -   Pointer to a double value receiving the rectangle
  /// top boundary.
  /// right       -   Pointer to a double value receiving the rectangle
  /// right boundary.
  /// bottom      -   Pointer to a double value receiving the rectangle
  /// bottom boundary.
  /// Return Value:
  /// On success, return TRUE and fill in |left|, |top|, |right|, and
  /// |bottom|. If |text_page| is invalid then return FALSE, and the out
  /// parameters remain unmodified. If |text_page| is valid but
  /// |rect_index| is out of bounds, then return FALSE and set the out
  /// parameters to 0.
  int FPDFText_GetRect(
    FPDF_TEXTPAGE text_page,
    int rect_index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> top,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
  ) {
    return _FPDFText_GetRect(text_page, rect_index, left, top, right, bottom);
  }

  late final _FPDFText_GetRectPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_TEXTPAGE,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDFText_GetRect');
  late final _FPDFText_GetRect =
      _FPDFText_GetRectPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Function: FPDFText_GetBoundedText
  /// Extract unicode text within a rectangular boundary on the page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// left        -   Left boundary.
  /// top         -   Top boundary.
  /// right       -   Right boundary.
  /// bottom      -   Bottom boundary.
  /// buffer      -   Caller-allocated buffer to receive UTF-16 values.
  /// buflen      -   Number of UTF-16 values (not bytes) that `buffer`
  /// is capable of holding.
  /// Return Value:
  /// If buffer is NULL or buflen is zero, return number of UTF-16
  /// values (not bytes) of text present within the rectangle, excluding
  /// a terminating NUL. Generally you should pass a buffer at least one
  /// larger than this if you want a terminating NUL, which will be
  /// provided if space is available. Otherwise, return number of UTF-16
  /// values copied into the buffer, including the terminating NUL when
  /// space for it is available.
  /// Comment:
  /// If the buffer is too small, as much text as will fit is copied into
  /// it. May return a split surrogate in that case.
  int FPDFText_GetBoundedText(
    FPDF_TEXTPAGE text_page,
    double left,
    double top,
    double right,
    double bottom,
    ffi.Pointer<ffi.UnsignedShort> buffer,
    int buflen,
  ) {
    return _FPDFText_GetBoundedText(
      text_page,
      left,
      top,
      right,
      bottom,
      buffer,
      buflen,
    );
  }

  late final _FPDFText_GetBoundedTextPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_TEXTPAGE,
            ffi.Double,
            ffi.Double,
            ffi.Double,
            ffi.Double,
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Int,
          )
        >
      >('FPDFText_GetBoundedText');
  late final _FPDFText_GetBoundedText =
      _FPDFText_GetBoundedTextPtr.asFunction<
        int Function(
          FPDF_TEXTPAGE,
          double,
          double,
          double,
          double,
          ffi.Pointer<ffi.UnsignedShort>,
          int,
        )
      >();

  /// Function: FPDFText_FindStart
  /// Start a search.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// findwhat    -   A unicode match pattern.
  /// flags       -   Option flags.
  /// start_index -   Start from this character. -1 for end of the page.
  /// Return Value:
  /// A handle for the search context. FPDFText_FindClose must be called
  /// to release this handle.
  FPDF_SCHHANDLE FPDFText_FindStart(
    FPDF_TEXTPAGE text_page,
    FPDF_WIDESTRING findwhat,
    int flags,
    int start_index,
  ) {
    return _FPDFText_FindStart(text_page, findwhat, flags, start_index);
  }

  late final _FPDFText_FindStartPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_SCHHANDLE Function(
            FPDF_TEXTPAGE,
            FPDF_WIDESTRING,
            ffi.UnsignedLong,
            ffi.Int,
          )
        >
      >('FPDFText_FindStart');
  late final _FPDFText_FindStart =
      _FPDFText_FindStartPtr.asFunction<
        FPDF_SCHHANDLE Function(FPDF_TEXTPAGE, FPDF_WIDESTRING, int, int)
      >();

  /// Function: FPDFText_FindNext
  /// Search in the direction from page start to end.
  /// Parameters:
  /// handle      -   A search context handle returned by
  /// FPDFText_FindStart.
  /// Return Value:
  /// Whether a match is found.
  int FPDFText_FindNext(FPDF_SCHHANDLE handle) {
    return _FPDFText_FindNext(handle);
  }

  late final _FPDFText_FindNextPtr =
      _lookup<ffi.NativeFunction<FPDF_BOOL Function(FPDF_SCHHANDLE)>>(
        'FPDFText_FindNext',
      );
  late final _FPDFText_FindNext =
      _FPDFText_FindNextPtr.asFunction<int Function(FPDF_SCHHANDLE)>();

  /// Function: FPDFText_FindPrev
  /// Search in the direction from page end to start.
  /// Parameters:
  /// handle      -   A search context handle returned by
  /// FPDFText_FindStart.
  /// Return Value:
  /// Whether a match is found.
  int FPDFText_FindPrev(FPDF_SCHHANDLE handle) {
    return _FPDFText_FindPrev(handle);
  }

  late final _FPDFText_FindPrevPtr =
      _lookup<ffi.NativeFunction<FPDF_BOOL Function(FPDF_SCHHANDLE)>>(
        'FPDFText_FindPrev',
      );
  late final _FPDFText_FindPrev =
      _FPDFText_FindPrevPtr.asFunction<int Function(FPDF_SCHHANDLE)>();

  /// Function: FPDFText_GetSchResultIndex
  /// Get the starting character index of the search result.
  /// Parameters:
  /// handle      -   A search context handle returned by
  /// FPDFText_FindStart.
  /// Return Value:
  /// Index for the starting character.
  int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle) {
    return _FPDFText_GetSchResultIndex(handle);
  }

  late final _FPDFText_GetSchResultIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_SCHHANDLE)>>(
        'FPDFText_GetSchResultIndex',
      );
  late final _FPDFText_GetSchResultIndex =
      _FPDFText_GetSchResultIndexPtr.asFunction<int Function(FPDF_SCHHANDLE)>();

  /// Function: FPDFText_GetSchCount
  /// Get the number of matched characters in the search result.
  /// Parameters:
  /// handle      -   A search context handle returned by
  /// FPDFText_FindStart.
  /// Return Value:
  /// Number of matched characters.
  int FPDFText_GetSchCount(FPDF_SCHHANDLE handle) {
    return _FPDFText_GetSchCount(handle);
  }

  late final _FPDFText_GetSchCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_SCHHANDLE)>>(
        'FPDFText_GetSchCount',
      );
  late final _FPDFText_GetSchCount =
      _FPDFText_GetSchCountPtr.asFunction<int Function(FPDF_SCHHANDLE)>();

  /// Function: FPDFText_FindClose
  /// Release a search context.
  /// Parameters:
  /// handle      -   A search context handle returned by
  /// FPDFText_FindStart.
  /// Return Value:
  /// None.
  void FPDFText_FindClose(FPDF_SCHHANDLE handle) {
    return _FPDFText_FindClose(handle);
  }

  late final _FPDFText_FindClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_SCHHANDLE)>>(
        'FPDFText_FindClose',
      );
  late final _FPDFText_FindClose =
      _FPDFText_FindClosePtr.asFunction<void Function(FPDF_SCHHANDLE)>();

  /// Function: FPDFLink_LoadWebLinks
  /// Prepare information about weblinks in a page.
  /// Parameters:
  /// text_page   -   Handle to a text page information structure.
  /// Returned by FPDFText_LoadPage function.
  /// Return Value:
  /// A handle to the page's links information structure, or
  /// NULL if something goes wrong.
  /// Comments:
  /// Weblinks are those links implicitly embedded in PDF pages. PDF also
  /// has a type of annotation called "link" (FPDFTEXT doesn't deal with
  /// that kind of link). FPDFTEXT weblink feature is useful for
  /// automatically detecting links in the page contents. For example,
  /// things like "https://www.example.com" will be detected, so
  /// applications can allow user to click on those characters to activate
  /// the link, even the PDF doesn't come with link annotations.
  ///
  /// FPDFLink_CloseWebLinks must be called to release resources.
  FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page) {
    return _FPDFLink_LoadWebLinks(text_page);
  }

  late final _FPDFLink_LoadWebLinksPtr =
      _lookup<ffi.NativeFunction<FPDF_PAGELINK Function(FPDF_TEXTPAGE)>>(
        'FPDFLink_LoadWebLinks',
      );
  late final _FPDFLink_LoadWebLinks =
      _FPDFLink_LoadWebLinksPtr.asFunction<
        FPDF_PAGELINK Function(FPDF_TEXTPAGE)
      >();

  /// Function: FPDFLink_CountWebLinks
  /// Count number of detected web links.
  /// Parameters:
  /// link_page   -   Handle returned by FPDFLink_LoadWebLinks.
  /// Return Value:
  /// Number of detected web links.
  int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page) {
    return _FPDFLink_CountWebLinks(link_page);
  }

  late final _FPDFLink_CountWebLinksPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_PAGELINK)>>(
        'FPDFLink_CountWebLinks',
      );
  late final _FPDFLink_CountWebLinks =
      _FPDFLink_CountWebLinksPtr.asFunction<int Function(FPDF_PAGELINK)>();

  /// Function: FPDFLink_GetURL
  /// Fetch the URL information for a detected web link.
  /// Parameters:
  /// link_page   -   Handle returned by FPDFLink_LoadWebLinks.
  /// link_index  -   Zero-based index for the link.
  /// buffer      -   A unicode buffer for the result.
  /// buflen      -   Number of 16-bit code units (not bytes) for the
  /// buffer, including an additional terminator.
  /// Return Value:
  /// If |buffer| is NULL or |buflen| is zero, return the number of 16-bit
  /// code units (not bytes) needed to buffer the result (an additional
  /// terminator is included in this count).
  /// Otherwise, copy the result into |buffer|, truncating at |buflen| if
  /// the result is too large to fit, and return the number of 16-bit code
  /// units actually copied into the buffer (the additional terminator is
  /// also included in this count).
  /// If |link_index| does not correspond to a valid link, then the result
  /// is an empty string.
  int FPDFLink_GetURL(
    FPDF_PAGELINK link_page,
    int link_index,
    ffi.Pointer<ffi.UnsignedShort> buffer,
    int buflen,
  ) {
    return _FPDFLink_GetURL(link_page, link_index, buffer, buflen);
  }

  late final _FPDFLink_GetURLPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_PAGELINK,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Int,
          )
        >
      >('FPDFLink_GetURL');
  late final _FPDFLink_GetURL =
      _FPDFLink_GetURLPtr.asFunction<
        int Function(FPDF_PAGELINK, int, ffi.Pointer<ffi.UnsignedShort>, int)
      >();

  /// Function: FPDFLink_CountRects
  /// Count number of rectangular areas for the link.
  /// Parameters:
  /// link_page   -   Handle returned by FPDFLink_LoadWebLinks.
  /// link_index  -   Zero-based index for the link.
  /// Return Value:
  /// Number of rectangular areas for the link.  If |link_index| does
  /// not correspond to a valid link, then 0 is returned.
  int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index) {
    return _FPDFLink_CountRects(link_page, link_index);
  }

  late final _FPDFLink_CountRectsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_PAGELINK, ffi.Int)>>(
        'FPDFLink_CountRects',
      );
  late final _FPDFLink_CountRects =
      _FPDFLink_CountRectsPtr.asFunction<int Function(FPDF_PAGELINK, int)>();

  /// Function: FPDFLink_GetRect
  /// Fetch the boundaries of a rectangle for a link.
  /// Parameters:
  /// link_page   -   Handle returned by FPDFLink_LoadWebLinks.
  /// link_index  -   Zero-based index for the link.
  /// rect_index  -   Zero-based index for a rectangle.
  /// left        -   Pointer to a double value receiving the rectangle
  /// left boundary.
  /// top         -   Pointer to a double value receiving the rectangle
  /// top boundary.
  /// right       -   Pointer to a double value receiving the rectangle
  /// right boundary.
  /// bottom      -   Pointer to a double value receiving the rectangle
  /// bottom boundary.
  /// Return Value:
  /// On success, return TRUE and fill in |left|, |top|, |right|, and
  /// |bottom|. If |link_page| is invalid or if |link_index| does not
  /// correspond to a valid link, then return FALSE, and the out
  /// parameters remain unmodified.
  int FPDFLink_GetRect(
    FPDF_PAGELINK link_page,
    int link_index,
    int rect_index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> top,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
  ) {
    return _FPDFLink_GetRect(
      link_page,
      link_index,
      rect_index,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _FPDFLink_GetRectPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_PAGELINK,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('FPDFLink_GetRect');
  late final _FPDFLink_GetRect =
      _FPDFLink_GetRectPtr.asFunction<
        int Function(
          FPDF_PAGELINK,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();

  /// Experimental API.
  /// Function: FPDFLink_GetTextRange
  /// Fetch the start char index and char count for a link.
  /// Parameters:
  /// link_page         -   Handle returned by FPDFLink_LoadWebLinks.
  /// link_index        -   Zero-based index for the link.
  /// start_char_index  -   pointer to int receiving the start char index
  /// char_count        -   pointer to int receiving the char count
  /// Return Value:
  /// On success, return TRUE and fill in |start_char_index| and
  /// |char_count|. if |link_page| is invalid or if |link_index| does
  /// not correspond to a valid link, then return FALSE and the out
  /// parameters remain unmodified.
  int FPDFLink_GetTextRange(
    FPDF_PAGELINK link_page,
    int link_index,
    ffi.Pointer<ffi.Int> start_char_index,
    ffi.Pointer<ffi.Int> char_count,
  ) {
    return _FPDFLink_GetTextRange(
      link_page,
      link_index,
      start_char_index,
      char_count,
    );
  }

  late final _FPDFLink_GetTextRangePtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_BOOL Function(
            FPDF_PAGELINK,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('FPDFLink_GetTextRange');
  late final _FPDFLink_GetTextRange =
      _FPDFLink_GetTextRangePtr.asFunction<
        int Function(
          FPDF_PAGELINK,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  /// Function: FPDFLink_CloseWebLinks
  /// Release resources used by weblink feature.
  /// Parameters:
  /// link_page   -   Handle returned by FPDFLink_LoadWebLinks.
  /// Return Value:
  /// None.
  void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page) {
    return _FPDFLink_CloseWebLinks(link_page);
  }

  late final _FPDFLink_CloseWebLinksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_PAGELINK)>>(
        'FPDFLink_CloseWebLinks',
      );
  late final _FPDFLink_CloseWebLinks =
      _FPDFLink_CloseWebLinksPtr.asFunction<void Function(FPDF_PAGELINK)>();

  int __sched_cpucount(int __setsize, ffi.Pointer<cpu_set_t> __setp) {
    return ___sched_cpucount(__setsize, __setp);
  }

  late final ___sched_cpucountPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>
      >('__sched_cpucount');
  late final ___sched_cpucount = ___sched_cpucountPtr
      .asFunction<int Function(int, ffi.Pointer<cpu_set_t>)>();

  ffi.Pointer<cpu_set_t> __sched_cpualloc(int __count) {
    return ___sched_cpualloc(__count);
  }

  late final ___sched_cpuallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Size)>>(
        '__sched_cpualloc',
      );
  late final ___sched_cpualloc = ___sched_cpuallocPtr
      .asFunction<ffi.Pointer<cpu_set_t> Function(int)>();

  void __sched_cpufree(ffi.Pointer<cpu_set_t> __set) {
    return ___sched_cpufree(__set);
  }

  late final ___sched_cpufreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>(
        '__sched_cpufree',
      );
  late final ___sched_cpufree = ___sched_cpufreePtr
      .asFunction<void Function(ffi.Pointer<cpu_set_t>)>();

  int sched_setparam(int __pid, ffi.Pointer<sched_param> __param) {
    return _sched_setparam(__pid, __param);
  }

  late final _sched_setparamPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>
      >('sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(int __pid, ffi.Pointer<sched_param> __param) {
    return _sched_getparam(__pid, __param);
  }

  late final _sched_getparamPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>
      >('sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(__pid, __policy, __param);
  }

  late final _sched_setschedulerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(__pid_t, ffi.Int, ffi.Pointer<sched_param>)
        >
      >('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(int __pid) {
    return _sched_getscheduler(__pid);
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t)>>(
        'sched_getscheduler',
      );
  late final _sched_getscheduler = _sched_getschedulerPtr
      .asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'sched_yield',
  );
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(int __algorithm) {
    return _sched_get_priority_max(__algorithm);
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'sched_get_priority_max',
      );
  late final _sched_get_priority_max = _sched_get_priority_maxPtr
      .asFunction<int Function(int)>();

  int sched_get_priority_min(int __algorithm) {
    return _sched_get_priority_min(__algorithm);
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'sched_get_priority_min',
      );
  late final _sched_get_priority_min = _sched_get_priority_minPtr
      .asFunction<int Function(int)>();

  int sched_rr_get_interval(int __pid, ffi.Pointer<timespec> __t) {
    return _sched_rr_get_interval(__pid, __t);
  }

  late final _sched_rr_get_intervalPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>
      >('sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr = _lookup<ffi.NativeFunction<clock_t Function()>>(
    'clock',
  );
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(ffi.Pointer<time_t> __timer) {
    return _time(__timer);
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(int __time1, int __time0) {
    return _difftime(__time1, __time0);
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
        'difftime',
      );
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(ffi.Pointer<tm> __tp) {
    return _mktime(__tp);
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(__s, __maxsize, __format, __tp);
  }

  late final _strftimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<tm>,
          )
        >
      >('strftime');
  late final _strftime = _strftimePtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>,
        )
      >();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(__s, __maxsize, __format, __tp, __loc);
  }

  late final _strftime_lPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<tm>,
            locale_t,
          )
        >
      >('strftime_l');
  late final _strftime_l = _strftime_lPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>,
          locale_t,
        )
      >();

  ffi.Pointer<tm> gmtime(ffi.Pointer<time_t> __timer) {
    return _gmtime(__timer);
  }

  late final _gmtimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>
      >('gmtime');
  late final _gmtime = _gmtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(ffi.Pointer<time_t> __timer) {
    return _localtime(__timer);
  }

  late final _localtimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>
      >('localtime');
  late final _localtime = _localtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(ffi.Pointer<time_t> __timer, ffi.Pointer<tm> __tp) {
    return _gmtime_r(__timer, __tp);
  }

  late final _gmtime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
        >
      >('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr
      .asFunction<
        ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
      >();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(__timer, __tp);
  }

  late final _localtime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
        >
      >('localtime_r');
  late final _localtime_r = _localtime_rPtr
      .asFunction<
        ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
      >();

  ffi.Pointer<ffi.Char> asctime(ffi.Pointer<tm> __tp) {
    return _asctime(__tp);
  }

  late final _asctimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>
      >('asctime');
  late final _asctime = _asctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(ffi.Pointer<time_t> __timer) {
    return _ctime(__timer);
  }

  late final _ctimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>
      >('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(__tp, __buf);
  }

  late final _asctime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)
        >
      >('asctime_r');
  late final _asctime_r = _asctime_rPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(__timer, __buf);
  }

  late final _ctime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<time_t>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('ctime_r');
  late final _ctime_r = _ctime_rPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone = _lookup<ffi.Long>(
    '__timezone',
  );

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'tzset',
  );
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(ffi.Pointer<tm> __tp) {
    return _timegm(__tp);
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(ffi.Pointer<tm> __tp) {
    return _timelocal(__tp);
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
        'timelocal',
      );
  late final _timelocal = _timelocalPtr
      .asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(int __year) {
    return _dysize(__year);
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(__requested_time, __remaining);
  }

  late final _nanosleepPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)
        >
      >('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(int __clock_id, ffi.Pointer<timespec> __res) {
    return _clock_getres(__clock_id, __res);
  }

  late final _clock_getresPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_getres');
  late final _clock_getres = _clock_getresPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(int __clock_id, ffi.Pointer<timespec> __tp) {
    return _clock_gettime(__clock_id, __tp);
  }

  late final _clock_gettimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_gettime');
  late final _clock_gettime = _clock_gettimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(int __clock_id, ffi.Pointer<timespec> __tp) {
    return _clock_settime(__clock_id, __tp);
  }

  late final _clock_settimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_settime');
  late final _clock_settime = _clock_settimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(__clock_id, __flags, __req, __rem);
  }

  late final _clock_nanosleepPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            clockid_t,
            ffi.Int,
            ffi.Pointer<timespec>,
            ffi.Pointer<timespec>,
          )
        >
      >('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr
      .asFunction<
        int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)
      >();

  int clock_getcpuclockid(int __pid, ffi.Pointer<clockid_t> __clock_id) {
    return _clock_getcpuclockid(__pid, __clock_id);
  }

  late final _clock_getcpuclockidPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>
      >('clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(__clock_id, __evp, __timerid);
  }

  late final _timer_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            clockid_t,
            ffi.Pointer<sigevent>,
            ffi.Pointer<timer_t>,
          )
        >
      >('timer_create');
  late final _timer_create = _timer_createPtr
      .asFunction<
        int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)
      >();

  int timer_delete(timer_t __timerid) {
    return _timer_delete(__timerid);
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete = _timer_deletePtr
      .asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(__timerid, __flags, __value, __ovalue);
  }

  late final _timer_settimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            timer_t,
            ffi.Int,
            ffi.Pointer<itimerspec>,
            ffi.Pointer<itimerspec>,
          )
        >
      >('timer_settime');
  late final _timer_settime = _timer_settimePtr
      .asFunction<
        int Function(
          timer_t,
          int,
          ffi.Pointer<itimerspec>,
          ffi.Pointer<itimerspec>,
        )
      >();

  int timer_gettime(timer_t __timerid, ffi.Pointer<itimerspec> __value) {
    return _timer_gettime(__timerid, __value);
  }

  late final _timer_gettimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>
      >('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(timer_t __timerid) {
    return _timer_getoverrun(__timerid);
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
        'timer_getoverrun',
      );
  late final _timer_getoverrun = _timer_getoverrunPtr
      .asFunction<int Function(timer_t)>();

  int timespec_get(ffi.Pointer<timespec> __ts, int __base) {
    return _timespec_get(__ts, __base);
  }

  late final _timespec_getPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>
      >('timespec_get');
  late final _timespec_get = _timespec_getPtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>
    >
    __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(__newthread, __attr, __start_routine, __arg);
  }

  late final _pthread_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_t>,
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('pthread_create');
  late final _pthread_create = _pthread_createPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void pthread_exit(ffi.Pointer<ffi.Void> __retval) {
    return _pthread_exit(__retval);
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'pthread_exit',
      );
  late final _pthread_exit = _pthread_exitPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(__th, __thread_return);
  }

  late final _pthread_joinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)
        >
      >('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(int __th) {
    return _pthread_detach(__th);
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
        'pthread_detach',
      );
  late final _pthread_detach = _pthread_detachPtr
      .asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(int __thread1, int __thread2) {
    return _pthread_equal(__thread1, __thread2);
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
        'pthread_equal',
      );
  late final _pthread_equal = _pthread_equalPtr
      .asFunction<int Function(int, int)>();

  int pthread_attr_init(ffi.Pointer<pthread_attr_t> __attr) {
    return _pthread_attr_init(__attr);
  }

  late final _pthread_attr_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>
      >('pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(ffi.Pointer<pthread_attr_t> __attr) {
    return _pthread_attr_destroy(__attr);
  }

  late final _pthread_attr_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>
      >('pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(__attr, __detachstate);
  }

  late final _pthread_attr_getdetachstatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
        >
      >('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate = _pthread_attr_getdetachstatePtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(__attr, __detachstate);
  }

  late final _pthread_attr_setdetachstatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)
        >
      >('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __guardsize,
  ) {
    return _pthread_attr_getguardsize(__attr, __guardsize);
  }

  late final _pthread_attr_getguardsizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)
        >
      >('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize = _pthread_attr_getguardsizePtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)
      >();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(__attr, __guardsize);
  }

  late final _pthread_attr_setguardsizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)
        >
      >('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(__attr, __param);
  }

  late final _pthread_attr_getschedparamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<sched_param>,
          )
        >
      >('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam = _pthread_attr_getschedparamPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)
      >();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(__attr, __param);
  }

  late final _pthread_attr_setschedparamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<sched_param>,
          )
        >
      >('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam = _pthread_attr_setschedparamPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)
      >();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(__attr, __policy);
  }

  late final _pthread_attr_getschedpolicyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
        >
      >('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy = _pthread_attr_getschedpolicyPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(__attr, __policy);
  }

  late final _pthread_attr_setschedpolicyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)
        >
      >('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(__attr, __inherit);
  }

  late final _pthread_attr_getinheritschedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
        >
      >('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched = _pthread_attr_getinheritschedPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(__attr, __inherit);
  }

  late final _pthread_attr_setinheritschedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)
        >
      >('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(__attr, __scope);
  }

  late final _pthread_attr_getscopePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
        >
      >('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_attr_setscope(ffi.Pointer<pthread_attr_t> __attr, int __scope) {
    return _pthread_attr_setscope(__attr, __scope);
  }

  late final _pthread_attr_setscopePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)
        >
      >('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(__attr, __stackaddr);
  }

  late final _pthread_attr_getstackaddrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
          )
        >
      >('pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr = _pthread_attr_getstackaddrPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
        )
      >();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(__attr, __stackaddr);
  }

  late final _pthread_attr_setstackaddrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)
        >
      >('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr = _pthread_attr_setstackaddrPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)
      >();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstacksize(__attr, __stacksize);
  }

  late final _pthread_attr_getstacksizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)
        >
      >('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize = _pthread_attr_getstacksizePtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)
      >();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(__attr, __stacksize);
  }

  late final _pthread_attr_setstacksizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)
        >
      >('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstack(__attr, __stackaddr, __stacksize);
  }

  late final _pthread_attr_getstackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(__attr, __stackaddr, __stacksize);
  }

  late final _pthread_attr_setstackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)
      >();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(__target_thread, __policy, __param);
  }

  late final _pthread_setschedparamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int, ffi.Pointer<sched_param>)
        >
      >('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(__target_thread, __policy, __param);
  }

  late final _pthread_getschedparamPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            pthread_t,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<sched_param>,
          )
        >
      >('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr
      .asFunction<
        int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)
      >();

  int pthread_setschedprio(int __target_thread, int __prio) {
    return _pthread_setschedprio(__target_thread, __prio);
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
        'pthread_setschedprio',
      );
  late final _pthread_setschedprio = _pthread_setschedprioPtr
      .asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(__once_control, __init_routine);
  }

  late final _pthread_oncePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_once_t>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          )
        >
      >('pthread_once');
  late final _pthread_once = _pthread_oncePtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
        )
      >();

  int pthread_setcancelstate(int __state, ffi.Pointer<ffi.Int> __oldstate) {
    return _pthread_setcancelstate(__state, __oldstate);
  }

  late final _pthread_setcancelstatePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>
      >('pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(int __type, ffi.Pointer<ffi.Int> __oldtype) {
    return _pthread_setcanceltype(__type, __oldtype);
  }

  late final _pthread_setcanceltypePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>
      >('pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(int __th) {
    return _pthread_cancel(__th);
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
        'pthread_cancel',
      );
  late final _pthread_cancel = _pthread_cancelPtr
      .asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel = _pthread_testcancelPtr
      .asFunction<void Function()>();

  void __pthread_register_cancel(ffi.Pointer<__pthread_unwind_buf_t> __buf) {
    return ___pthread_register_cancel(__buf);
  }

  late final ___pthread_register_cancelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)
        >
      >('__pthread_register_cancel');
  late final ___pthread_register_cancel = ___pthread_register_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unregister_cancel(ffi.Pointer<__pthread_unwind_buf_t> __buf) {
    return ___pthread_unregister_cancel(__buf);
  }

  late final ___pthread_unregister_cancelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)
        >
      >('__pthread_unregister_cancel');
  late final ___pthread_unregister_cancel = ___pthread_unregister_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unwind_next(ffi.Pointer<__pthread_unwind_buf_t> __buf) {
    return ___pthread_unwind_next(__buf);
  }

  late final ___pthread_unwind_nextPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)
        >
      >('__pthread_unwind_next');
  late final ___pthread_unwind_next = ___pthread_unwind_nextPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  int __sigsetjmp(ffi.Pointer<__jmp_buf_tag> __env, int __savemask) {
    return ___sigsetjmp(__env, __savemask);
  }

  late final ___sigsetjmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<__jmp_buf_tag>, ffi.Int)
        >
      >('__sigsetjmp');
  late final ___sigsetjmp = ___sigsetjmpPtr
      .asFunction<int Function(ffi.Pointer<__jmp_buf_tag>, int)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(__mutex, __mutexattr);
  }

  late final _pthread_mutex_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>,
            ffi.Pointer<pthread_mutexattr_t>,
          )
        >
      >('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<pthread_mutexattr_t>,
        )
      >();

  int pthread_mutex_destroy(ffi.Pointer<pthread_mutex_t> __mutex) {
    return _pthread_mutex_destroy(__mutex);
  }

  late final _pthread_mutex_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>
      >('pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(ffi.Pointer<pthread_mutex_t> __mutex) {
    return _pthread_mutex_trylock(__mutex);
  }

  late final _pthread_mutex_trylockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>
      >('pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(ffi.Pointer<pthread_mutex_t> __mutex) {
    return _pthread_mutex_lock(__mutex);
  }

  late final _pthread_mutex_lockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>
      >('pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(__mutex, __abstime);
  }

  late final _pthread_mutex_timedlockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)
        >
      >('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)
      >();

  int pthread_mutex_unlock(ffi.Pointer<pthread_mutex_t> __mutex) {
    return _pthread_mutex_unlock(__mutex);
  }

  late final _pthread_mutex_unlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>
      >('pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(__mutex, __prioceiling);
  }

  late final _pthread_mutex_getprioceilingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)
        >
      >('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling = _pthread_mutex_getprioceilingPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(__mutex, __prioceiling, __old_ceiling);
  }

  late final _pthread_mutex_setprioceilingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling = _pthread_mutex_setprioceilingPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutex_consistent(ffi.Pointer<pthread_mutex_t> __mutex) {
    return _pthread_mutex_consistent(__mutex);
  }

  late final _pthread_mutex_consistentPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>
      >('pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(ffi.Pointer<pthread_mutexattr_t> __attr) {
    return _pthread_mutexattr_init(__attr);
  }

  late final _pthread_mutexattr_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>
      >('pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(ffi.Pointer<pthread_mutexattr_t> __attr) {
    return _pthread_mutexattr_destroy(__attr);
  }

  late final _pthread_mutexattr_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>
      >('pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(__attr, __pshared);
  }

  late final _pthread_mutexattr_getpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared = _pthread_mutexattr_getpsharedPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(__attr, __pshared);
  }

  late final _pthread_mutexattr_setpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)
        >
      >('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(__attr, __kind);
  }

  late final _pthread_mutexattr_gettypePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype = _pthread_mutexattr_gettypePtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(__attr, __kind);
  }

  late final _pthread_mutexattr_settypePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)
        >
      >('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(__attr, __protocol);
  }

  late final _pthread_mutexattr_getprotocolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol = _pthread_mutexattr_getprotocolPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(__attr, __protocol);
  }

  late final _pthread_mutexattr_setprotocolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)
        >
      >('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(__attr, __prioceiling);
  }

  late final _pthread_mutexattr_getprioceilingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr
          .asFunction<
            int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)
          >();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(__attr, __prioceiling);
  }

  late final _pthread_mutexattr_setprioceilingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)
        >
      >('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(__attr, __robustness);
  }

  late final _pthread_mutexattr_getrobustPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust = _pthread_mutexattr_getrobustPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(__attr, __robustness);
  }

  late final _pthread_mutexattr_setrobustPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)
        >
      >('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(__rwlock, __attr);
  }

  late final _pthread_rwlock_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_rwlock_t>,
            ffi.Pointer<pthread_rwlockattr_t>,
          )
        >
      >('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_rwlock_t>,
          ffi.Pointer<pthread_rwlockattr_t>,
        )
      >();

  int pthread_rwlock_destroy(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_destroy(__rwlock);
  }

  late final _pthread_rwlock_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_rdlock(__rwlock);
  }

  late final _pthread_rwlock_rdlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_tryrdlock(__rwlock);
  }

  late final _pthread_rwlock_tryrdlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(__rwlock, __abstime);
  }

  late final _pthread_rwlock_timedrdlockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)
        >
      >('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock = _pthread_rwlock_timedrdlockPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)
      >();

  int pthread_rwlock_wrlock(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_wrlock(__rwlock);
  }

  late final _pthread_rwlock_wrlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_trywrlock(__rwlock);
  }

  late final _pthread_rwlock_trywrlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(__rwlock, __abstime);
  }

  late final _pthread_rwlock_timedwrlockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)
        >
      >('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock = _pthread_rwlock_timedwrlockPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)
      >();

  int pthread_rwlock_unlock(ffi.Pointer<pthread_rwlock_t> __rwlock) {
    return _pthread_rwlock_unlock(__rwlock);
  }

  late final _pthread_rwlock_unlockPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>
      >('pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(ffi.Pointer<pthread_rwlockattr_t> __attr) {
    return _pthread_rwlockattr_init(__attr);
  }

  late final _pthread_rwlockattr_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>
      >('pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(ffi.Pointer<pthread_rwlockattr_t> __attr) {
    return _pthread_rwlockattr_destroy(__attr);
  }

  late final _pthread_rwlockattr_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>
      >('pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(__attr, __pshared);
  }

  late final _pthread_rwlockattr_getpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared = _pthread_rwlockattr_getpsharedPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(__attr, __pshared);
  }

  late final _pthread_rwlockattr_setpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)
        >
      >('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(__attr, __pref);
  }

  late final _pthread_rwlockattr_getkind_npPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np = _pthread_rwlockattr_getkind_npPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(__attr, __pref);
  }

  late final _pthread_rwlockattr_setkind_npPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)
        >
      >('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(__cond, __cond_attr);
  }

  late final _pthread_cond_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_cond_t>,
            ffi.Pointer<pthread_condattr_t>,
          )
        >
      >('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_cond_t>,
          ffi.Pointer<pthread_condattr_t>,
        )
      >();

  int pthread_cond_destroy(ffi.Pointer<pthread_cond_t> __cond) {
    return _pthread_cond_destroy(__cond);
  }

  late final _pthread_cond_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>
      >('pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(ffi.Pointer<pthread_cond_t> __cond) {
    return _pthread_cond_signal(__cond);
  }

  late final _pthread_cond_signalPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>
      >('pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(ffi.Pointer<pthread_cond_t> __cond) {
    return _pthread_cond_broadcast(__cond);
  }

  late final _pthread_cond_broadcastPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>
      >('pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(__cond, __mutex);
  }

  late final _pthread_cond_waitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_cond_t>,
            ffi.Pointer<pthread_mutex_t>,
          )
        >
      >('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)
      >();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(__cond, __mutex, __abstime);
  }

  late final _pthread_cond_timedwaitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_cond_t>,
            ffi.Pointer<pthread_mutex_t>,
            ffi.Pointer<timespec>,
          )
        >
      >('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_cond_t>,
          ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>,
        )
      >();

  int pthread_condattr_init(ffi.Pointer<pthread_condattr_t> __attr) {
    return _pthread_condattr_init(__attr);
  }

  late final _pthread_condattr_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>
      >('pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(ffi.Pointer<pthread_condattr_t> __attr) {
    return _pthread_condattr_destroy(__attr);
  }

  late final _pthread_condattr_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>
      >('pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(__attr, __pshared);
  }

  late final _pthread_condattr_getpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared = _pthread_condattr_getpsharedPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)
      >();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(__attr, __pshared);
  }

  late final _pthread_condattr_setpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)
        >
      >('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_condattr_getclock(__attr, __clock_id);
  }

  late final _pthread_condattr_getclockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>,
            ffi.Pointer<__clockid_t>,
          )
        >
      >('pthread_condattr_getclock');
  late final _pthread_condattr_getclock = _pthread_condattr_getclockPtr
      .asFunction<
        int Function(ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)
      >();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(__attr, __clock_id);
  }

  late final _pthread_condattr_setclockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>, __clockid_t)
        >
      >('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(__barrier, __attr, __count);
  }

  late final _pthread_barrier_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_barrier_t>,
            ffi.Pointer<pthread_barrierattr_t>,
            ffi.UnsignedInt,
          )
        >
      >('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>,
          int,
        )
      >();

  int pthread_barrier_destroy(ffi.Pointer<pthread_barrier_t> __barrier) {
    return _pthread_barrier_destroy(__barrier);
  }

  late final _pthread_barrier_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>
      >('pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(ffi.Pointer<pthread_barrier_t> __barrier) {
    return _pthread_barrier_wait(__barrier);
  }

  late final _pthread_barrier_waitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>
      >('pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(ffi.Pointer<pthread_barrierattr_t> __attr) {
    return _pthread_barrierattr_init(__attr);
  }

  late final _pthread_barrierattr_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>
      >('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(ffi.Pointer<pthread_barrierattr_t> __attr) {
    return _pthread_barrierattr_destroy(__attr);
  }

  late final _pthread_barrierattr_destroyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>
      >('pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(__attr, __pshared);
  }

  late final _pthread_barrierattr_getpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_barrierattr_t>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr
          .asFunction<
            int Function(
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>,
            )
          >();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(__attr, __pshared);
  }

  late final _pthread_barrierattr_setpsharedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>, ffi.Int)
        >
      >('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
    __destr_function,
  ) {
    return _pthread_key_create(__key, __destr_function);
  }

  late final _pthread_key_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<pthread_key_t>,
            ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>
            >,
          )
        >
      >('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr
      .asFunction<
        int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >();

  int pthread_key_delete(int __key) {
    return _pthread_key_delete(__key);
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
        'pthread_key_delete',
      );
  late final _pthread_key_delete = _pthread_key_deletePtr
      .asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(int __key) {
    return _pthread_getspecific(__key);
  }

  late final _pthread_getspecificPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>
      >('pthread_getspecific');
  late final _pthread_getspecific = _pthread_getspecificPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(int __key, ffi.Pointer<ffi.Void> __pointer) {
    return _pthread_setspecific(__key, __pointer);
  }

  late final _pthread_setspecificPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(pthread_key_t, ffi.Pointer<ffi.Void>)
        >
      >('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_getcpuclockid(__thread_id, __clock_id);
  }

  late final _pthread_getcpuclockidPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<__clockid_t>)
        >
      >('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<__clockid_t>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(__prepare, __parent, __child);
  }

  late final _pthread_atforkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          )
        >
      >('pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
        )
      >();

  int access(ffi.Pointer<ffi.Char> __name, int __type) {
    return _access(__name, __type);
  }

  late final _accessPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>
      >('access');
  late final _access = _accessPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(__fd, __file, __type, __flag);
  }

  late final _faccessatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)
        >
      >('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int lseek(int __fd, int __offset, int __whence) {
    return _lseek(__fd, __offset, __whence);
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Int, __off_t, ffi.Int)>>(
        'lseek',
      );
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int close(int __fd) {
    return _close(__fd);
  }

  late final _closePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
    'close',
  );
  late final _close = _closePtr.asFunction<int Function(int)>();

  void closefrom(int __lowfd) {
    return _closefrom(__lowfd);
  }

  late final _closefromPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('closefrom');
  late final _closefrom = _closefromPtr.asFunction<void Function(int)>();

  int read(int __fd, ffi.Pointer<ffi.Void> __buf, int __nbytes) {
    return _read(__fd, __buf, __nbytes);
  }

  late final _readPtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('read');
  late final _read = _readPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int write(int __fd, ffi.Pointer<ffi.Void> __buf, int __n) {
    return _write(__fd, __buf, __n);
  }

  late final _writePtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('write');
  late final _write = _writePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pread(int __fd, ffi.Pointer<ffi.Void> __buf, int __nbytes, int __offset) {
    return _pread(__fd, __buf, __nbytes, __offset);
  }

  late final _preadPtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)
        >
      >('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(int __fd, ffi.Pointer<ffi.Void> __buf, int __n, int __offset) {
    return _pwrite(__fd, __buf, __n, __offset);
  }

  late final _pwritePtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)
        >
      >('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pipe(ffi.Pointer<ffi.Int> __pipedes) {
    return _pipe(__pipedes);
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
        'pipe',
      );
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int alarm(int __seconds) {
    return _alarm(__seconds);
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
        'alarm',
      );
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int sleep(int __seconds) {
    return _sleep(__seconds);
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
        'sleep',
      );
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int ualarm(int __value, int __interval) {
    return _ualarm(__value, __interval);
  }

  late final _ualarmPtr =
      _lookup<
        ffi.NativeFunction<__useconds_t Function(__useconds_t, __useconds_t)>
      >('ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(int __useconds) {
    return _usleep(__useconds);
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'pause',
  );
  late final _pause = _pausePtr.asFunction<int Function()>();

  int chown(ffi.Pointer<ffi.Char> __file, int __owner, int __group) {
    return _chown(__file, __owner, __group);
  }

  late final _chownPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)
        >
      >('chown');
  late final _chown = _chownPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchown(int __fd, int __owner, int __group) {
    return _fchown(__fd, __owner, __group);
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __uid_t, __gid_t)>>(
        'fchown',
      );
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int lchown(ffi.Pointer<ffi.Char> __file, int __owner, int __group) {
    return _lchown(__file, __owner, __group);
  }

  late final _lchownPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)
        >
      >('lchown');
  late final _lchown = _lchownPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(__fd, __file, __owner, __group, __flag);
  }

  late final _fchownatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            __uid_t,
            __gid_t,
            ffi.Int,
          )
        >
      >('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int chdir(ffi.Pointer<ffi.Char> __path) {
    return _chdir(__path);
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'chdir',
      );
  late final _chdir = _chdirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fchdir(int __fd) {
    return _fchdir(__fd);
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getcwd(ffi.Pointer<ffi.Char> __buf, int __size) {
    return _getcwd(__buf, __size);
  }

  late final _getcwdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getwd(ffi.Pointer<ffi.Char> __buf) {
    return _getwd(__buf);
  }

  late final _getwdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int dup(int __fd) {
    return _dup(__fd);
  }

  late final _dupPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
    'dup',
  );
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(int __fd, int __fd2) {
    return _dup2(__fd, __fd2);
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___environ.value = value;

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(__path, __argv, __envp);
  }

  late final _execvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('execve');
  late final _execve = _execvePtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _fexecve(__fd, __argv, __envp);
  }

  late final _fexecvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('fexecve');
  late final _fexecve = _fexecvePtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(__path, __argv);
  }

  late final _execvPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('execv');
  late final _execv = _execvPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int execle(ffi.Pointer<ffi.Char> __path, ffi.Pointer<ffi.Char> __arg) {
    return _execle(__path, __arg);
  }

  late final _execlePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execl(ffi.Pointer<ffi.Char> __path, ffi.Pointer<ffi.Char> __arg) {
    return _execl(__path, __arg);
  }

  late final _execlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(__file, __argv);
  }

  late final _execvpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('execvp');
  late final _execvp = _execvpPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int execlp(ffi.Pointer<ffi.Char> __file, ffi.Pointer<ffi.Char> __arg) {
    return _execlp(__file, __arg);
  }

  late final _execlpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nice(int __inc) {
    return _nice(__inc);
  }

  late final _nicePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
    'nice',
  );
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  void _exit(int __status) {
    return __exit(__status);
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int pathconf(ffi.Pointer<ffi.Char> __path, int __name) {
    return _pathconf(__path, __name);
  }

  late final _pathconfPtr =
      _lookup<
        ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>
      >('pathconf');
  late final _pathconf = _pathconfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fpathconf(int __fd, int __name) {
    return _fpathconf(__fd, __name);
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
        'fpathconf',
      );
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  int sysconf(int __name) {
    return _sysconf(__name);
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int confstr(int __name, ffi.Pointer<ffi.Char> __buf, int __len) {
    return _confstr(__name, __buf, __len);
  }

  late final _confstrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('confstr');
  late final _confstr = _confstrPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>(
    'getpid',
  );
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>(
    'getppid',
  );
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>(
    'getpgrp',
  );
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int __getpgid(int __pid) {
    return ___getpgid(__pid);
  }

  late final ___getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('__getpgid');
  late final ___getpgid = ___getpgidPtr.asFunction<int Function(int)>();

  int getpgid(int __pid) {
    return _getpgid(__pid);
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int setpgid(int __pid, int __pgid) {
    return _setpgid(__pid, __pgid);
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, __pid_t)>>(
        'setpgid',
      );
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'setpgrp',
  );
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>(
    'setsid',
  );
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int getsid(int __pid) {
    return _getsid(__pid);
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr = _lookup<ffi.NativeFunction<__uid_t Function()>>(
    'getuid',
  );
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr = _lookup<ffi.NativeFunction<__uid_t Function()>>(
    'geteuid',
  );
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr = _lookup<ffi.NativeFunction<__gid_t Function()>>(
    'getgid',
  );
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr = _lookup<ffi.NativeFunction<__gid_t Function()>>(
    'getegid',
  );
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int getgroups(int __size, ffi.Pointer<__gid_t> __list) {
    return _getgroups(__size, __list);
  }

  late final _getgroupsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<__gid_t>)>
      >('getgroups');
  late final _getgroups = _getgroupsPtr
      .asFunction<int Function(int, ffi.Pointer<__gid_t>)>();

  int setuid(int __uid) {
    return _setuid(__uid);
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int setreuid(int __ruid, int __euid) {
    return _setreuid(__ruid, __euid);
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t, __uid_t)>>(
        'setreuid',
      );
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int seteuid(int __uid) {
    return _seteuid(__uid);
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(int __gid) {
    return _setgid(__gid);
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setregid(int __rgid, int __egid) {
    return _setregid(__rgid, __egid);
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t, __gid_t)>>(
        'setregid',
      );
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setegid(int __gid) {
    return _setegid(__gid);
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'vfork',
  );
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ttyname(int __fd) {
    return _ttyname(__fd);
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'ttyname',
      );
  late final _ttyname = _ttynamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(int __fd, ffi.Pointer<ffi.Char> __buf, int __buflen) {
    return _ttyname_r(__fd, __buf, __buflen);
  }

  late final _ttyname_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('ttyname_r');
  late final _ttyname_r = _ttyname_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int isatty(int __fd) {
    return _isatty(__fd);
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'ttyslot',
  );
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int link(ffi.Pointer<ffi.Char> __from, ffi.Pointer<ffi.Char> __to) {
    return _link(__from, __to);
  }

  late final _linkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
    int __flags,
  ) {
    return _linkat(__fromfd, __from, __tofd, __to, __flags);
  }

  late final _linkatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('linkat');
  late final _linkat = _linkatPtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int symlink(ffi.Pointer<ffi.Char> __from, ffi.Pointer<ffi.Char> __to) {
    return _symlink(__from, __to);
  }

  late final _symlinkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int readlink(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlink(__path, __buf, __len);
  }

  late final _readlinkPtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('readlink');
  late final _readlink = _readlinkPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int symlinkat(
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlinkat(__from, __tofd, __to);
  }

  late final _symlinkatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('symlinkat');
  late final _symlinkat = _symlinkatPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)
      >();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlinkat(__fd, __path, __buf, __len);
  }

  late final _readlinkatPtr =
      _lookup<
        ffi.NativeFunction<
          ssize_t Function(
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('readlinkat');
  late final _readlinkat = _readlinkatPtr
      .asFunction<
        int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int unlink(ffi.Pointer<ffi.Char> __name) {
    return _unlink(__name);
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'unlink',
      );
  late final _unlink = _unlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(int __fd, ffi.Pointer<ffi.Char> __name, int __flag) {
    return _unlinkat(__fd, __name, __flag);
  }

  late final _unlinkatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('unlinkat');
  late final _unlinkat = _unlinkatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int rmdir(ffi.Pointer<ffi.Char> __path) {
    return _rmdir(__path);
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'rmdir',
      );
  late final _rmdir = _rmdirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tcgetpgrp(int __fd) {
    return _tcgetpgrp(__fd);
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(int __fd, int __pgrp_id) {
    return _tcsetpgrp(__fd, __pgrp_id);
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __pid_t)>>(
        'tcsetpgrp',
      );
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin = _getloginPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getlogin_r(ffi.Pointer<ffi.Char> __name, int __name_len) {
    return _getlogin_r(__name, __name_len);
  }

  late final _getlogin_rPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('getlogin_r');
  late final _getlogin_r = _getlogin_rPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(ffi.Pointer<ffi.Char> __name) {
    return _setlogin(__name);
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'setlogin',
      );
  late final _setlogin = _setloginPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
    ffi.Pointer<ffi.Char> __shortopts,
  ) {
    return _getopt(___argc, ___argv, __shortopts);
  }

  late final _getoptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('getopt');
  late final _getopt = _getoptPtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int gethostname(ffi.Pointer<ffi.Char> __name, int __len) {
    return _gethostname(__name, __len);
  }

  late final _gethostnamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('gethostname');
  late final _gethostname = _gethostnamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostname(ffi.Pointer<ffi.Char> __name, int __len) {
    return _sethostname(__name, __len);
  }

  late final _sethostnamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('sethostname');
  late final _sethostname = _sethostnamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostid(int __id) {
    return _sethostid(__id);
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int getdomainname(ffi.Pointer<ffi.Char> __name, int __len) {
    return _getdomainname(__name, __len);
  }

  late final _getdomainnamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('getdomainname');
  late final _getdomainname = _getdomainnamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setdomainname(ffi.Pointer<ffi.Char> __name, int __len) {
    return _setdomainname(__name, __len);
  }

  late final _setdomainnamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('setdomainname');
  late final _setdomainname = _setdomainnamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangupPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'vhangup',
  );
  late final _vhangup = _vhangupPtr.asFunction<int Function()>();

  int revoke(ffi.Pointer<ffi.Char> __file) {
    return _revoke(__file);
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'revoke',
      );
  late final _revoke = _revokePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int profil(
    ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(__sample_buffer, __size, __offset, __scale);
  }

  late final _profilPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>,
            ffi.Size,
            ffi.Size,
            ffi.UnsignedInt,
          )
        >
      >('profil');
  late final _profil = _profilPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.UnsignedShort>, int, int, int)
      >();

  int acct(ffi.Pointer<ffi.Char> __name) {
    return _acct(__name);
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'acct',
      );
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'getusershell',
      );
  late final _getusershell = _getusershellPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int daemon(int __nochdir, int __noclose) {
    return _daemon(__nochdir, __noclose);
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  int chroot(ffi.Pointer<ffi.Char> __path) {
    return _chroot(__path);
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'chroot',
      );
  late final _chroot = _chrootPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getpass(ffi.Pointer<ffi.Char> __prompt) {
    return _getpass(__prompt);
  }

  late final _getpassPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int fsync(int __fd) {
    return _fsync(__fd);
  }

  late final _fsyncPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
    'fsync',
  );
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr = _lookup<ffi.NativeFunction<ffi.Long Function()>>(
    'gethostid',
  );
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'sync',
  );
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'getpagesize',
  );
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int truncate(ffi.Pointer<ffi.Char> __file, int __length) {
    return _truncate(__file, __length);
  }

  late final _truncatePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, __off_t)>
      >('truncate');
  late final _truncate = _truncatePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ftruncate(int __fd, int __length) {
    return _ftruncate(__fd, __length);
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __off_t)>>(
        'ftruncate',
      );
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int brk(ffi.Pointer<ffi.Void> __addr) {
    return _brk(__addr);
  }

  late final _brkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
        'brk',
      );
  late final _brk = _brkPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sbrk(int __delta) {
    return _sbrk(__delta);
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>(
        'sbrk',
      );
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(int __sysno) {
    return _syscall(__sysno);
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int lockf(int __fd, int __cmd, int __len) {
    return _lockf(__fd, __cmd, __len);
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, __off_t)>>(
        'lockf',
      );
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int fdatasync(int __fildes) {
    return _fdatasync(__fildes);
  }

  late final _fdatasyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fdatasync');
  late final _fdatasync = _fdatasyncPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> __key,
    ffi.Pointer<ffi.Char> __salt,
  ) {
    return _crypt(__key, __salt);
  }

  late final _cryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('crypt');
  late final _crypt = _cryptPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int getentropy(ffi.Pointer<ffi.Void> __buffer, int __length) {
    return _getentropy(__buffer, __length);
  }

  late final _getentropyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('getentropy');
  late final _getentropy = _getentropyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  void pdfium_init(ffi.Pointer<FPDF_LIBRARY_CONFIG> cfg) {
    return _pdfium_init(cfg);
  }

  late final _pdfium_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FPDF_LIBRARY_CONFIG>)>
      >('pdfium_init');
  late final _pdfium_init = _pdfium_initPtr
      .asFunction<void Function(ffi.Pointer<FPDF_LIBRARY_CONFIG>)>();

  void pdfium_dispose() {
    return _pdfium_dispose();
  }

  late final _pdfium_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pdfium_dispose');
  late final _pdfium_dispose = _pdfium_disposePtr.asFunction<void Function()>();

  FPDF_DOCUMENT pdfium_LoadDocument(
    FPDF_BYTESTRING path,
    FPDF_BYTESTRING password,
  ) {
    return _pdfium_LoadDocument(path, password);
  }

  late final _pdfium_LoadDocumentPtr =
      _lookup<
        ffi.NativeFunction<
          FPDF_DOCUMENT Function(FPDF_BYTESTRING, FPDF_BYTESTRING)
        >
      >('pdfium_LoadDocument');
  late final _pdfium_LoadDocument = _pdfium_LoadDocumentPtr
      .asFunction<FPDF_DOCUMENT Function(FPDF_BYTESTRING, FPDF_BYTESTRING)>();

  void pdfium_CloseDocument(FPDF_DOCUMENT doc) {
    return _pdfium_CloseDocument(doc);
  }

  late final _pdfium_CloseDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FPDF_DOCUMENT)>>(
        'pdfium_CloseDocument',
      );
  late final _pdfium_CloseDocument = _pdfium_CloseDocumentPtr
      .asFunction<void Function(FPDF_DOCUMENT)>();

  int pdfium_IsProtected(FPDF_DOCUMENT doc) {
    return _pdfium_IsProtected(doc);
  }

  late final _pdfium_IsProtectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'pdfium_IsProtected',
      );
  late final _pdfium_IsProtected = _pdfium_IsProtectedPtr
      .asFunction<int Function(FPDF_DOCUMENT)>();

  FPDF_BITMAP pdfium_CreateBitmapBuffer(int width, int height, int alpha) {
    return _pdfium_CreateBitmapBuffer(width, height, alpha);
  }

  late final _pdfium_CreateBitmapBufferPtr =
      _lookup<
        ffi.NativeFunction<FPDF_BITMAP Function(ffi.Int, ffi.Int, ffi.Int)>
      >('pdfium_CreateBitmapBuffer');
  late final _pdfium_CreateBitmapBuffer = _pdfium_CreateBitmapBufferPtr
      .asFunction<FPDF_BITMAP Function(int, int, int)>();

  int pdfium_freeBitmapBuffer(FPDF_BITMAP bitmap) {
    return _pdfium_freeBitmapBuffer(bitmap);
  }

  late final _pdfium_freeBitmapBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_BITMAP)>>(
        'pdfium_freeBitmapBuffer',
      );
  late final _pdfium_freeBitmapBuffer = _pdfium_freeBitmapBufferPtr
      .asFunction<int Function(FPDF_BITMAP)>();

  int pdfium_RenderPage(
    FPDF_DOCUMENT doc,
    FPDF_BITMAP bitmap,
    int pageIndex,
    int width,
    int height,
  ) {
    return _pdfium_RenderPage(doc, bitmap, pageIndex, width, height);
  }

  late final _pdfium_RenderPagePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_DOCUMENT,
            FPDF_BITMAP,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('pdfium_RenderPage');
  late final _pdfium_RenderPage = _pdfium_RenderPagePtr
      .asFunction<int Function(FPDF_DOCUMENT, FPDF_BITMAP, int, int, int)>();

  int pdfium_PageCount(FPDF_DOCUMENT document) {
    return _pdfium_PageCount(document);
  }

  late final _pdfium_PageCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT)>>(
        'pdfium_PageCount',
      );
  late final _pdfium_PageCount = _pdfium_PageCountPtr
      .asFunction<int Function(FPDF_DOCUMENT)>();

  int pdfium_CharCount(FPDF_DOCUMENT doc, int pageIndex) {
    return _pdfium_CharCount(doc, pageIndex);
  }

  late final _pdfium_CharCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FPDF_DOCUMENT, ffi.Int)>>(
        'pdfium_CharCount',
      );
  late final _pdfium_CharCount = _pdfium_CharCountPtr
      .asFunction<int Function(FPDF_DOCUMENT, int)>();

  int pdfium_GetPageText(
    FPDF_DOCUMENT doc,
    int pageIndex,
    ffi.Pointer<ffi.UnsignedShort> buffer,
  ) {
    return _pdfium_GetPageText(doc, pageIndex, buffer);
  }

  late final _pdfium_GetPageTextPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            FPDF_DOCUMENT,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedShort>,
          )
        >
      >('pdfium_GetPageText');
  late final _pdfium_GetPageText = _pdfium_GetPageTextPtr
      .asFunction<
        int Function(FPDF_DOCUMENT, int, ffi.Pointer<ffi.UnsignedShort>)
      >();

  ffi.Pointer<ffi.UnsignedShort> pdfium_NewBuffer(
    FPDF_DOCUMENT doc,
    int pageIndex,
  ) {
    return _pdfium_NewBuffer(doc, pageIndex);
  }

  late final _pdfium_NewBufferPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(FPDF_DOCUMENT, ffi.Int)
        >
      >('pdfium_NewBuffer');
  late final _pdfium_NewBuffer = _pdfium_NewBufferPtr
      .asFunction<
        ffi.Pointer<ffi.UnsignedShort> Function(FPDF_DOCUMENT, int)
      >();

  int pdfium_FreeBuffer(ffi.Pointer<ffi.UnsignedShort> buffer) {
    return _pdfium_FreeBuffer(buffer);
  }

  late final _pdfium_FreeBufferPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>)>
      >('pdfium_FreeBuffer');
  late final _pdfium_FreeBuffer = _pdfium_FreeBufferPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;
typedef __compar_fn_tFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction =
    int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);

final class max_align_t extends ffi.Opaque {}

/// PDF text rendering modes
enum FPDF_TEXT_RENDERMODE {
  FPDF_TEXTRENDERMODE_UNKNOWN(-1),
  FPDF_TEXTRENDERMODE_FILL(0),
  FPDF_TEXTRENDERMODE_STROKE(1),
  FPDF_TEXTRENDERMODE_FILL_STROKE(2),
  FPDF_TEXTRENDERMODE_INVISIBLE(3),
  FPDF_TEXTRENDERMODE_FILL_CLIP(4),
  FPDF_TEXTRENDERMODE_STROKE_CLIP(5),
  FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP(6),
  FPDF_TEXTRENDERMODE_CLIP(7);

  static const FPDF_TEXTRENDERMODE_LAST = FPDF_TEXTRENDERMODE_CLIP;

  final int value;
  const FPDF_TEXT_RENDERMODE(this.value);

  static FPDF_TEXT_RENDERMODE fromValue(int value) => switch (value) {
    -1 => FPDF_TEXTRENDERMODE_UNKNOWN,
    0 => FPDF_TEXTRENDERMODE_FILL,
    1 => FPDF_TEXTRENDERMODE_STROKE,
    2 => FPDF_TEXTRENDERMODE_FILL_STROKE,
    3 => FPDF_TEXTRENDERMODE_INVISIBLE,
    4 => FPDF_TEXTRENDERMODE_FILL_CLIP,
    5 => FPDF_TEXTRENDERMODE_STROKE_CLIP,
    6 => FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP,
    7 => FPDF_TEXTRENDERMODE_CLIP,
    _ => throw ArgumentError("Unknown value for FPDF_TEXT_RENDERMODE: $value"),
  };

  @override
  String toString() {
    if (this == FPDF_TEXTRENDERMODE_CLIP)
      return "FPDF_TEXT_RENDERMODE.FPDF_TEXTRENDERMODE_CLIP, FPDF_TEXT_RENDERMODE.FPDF_TEXTRENDERMODE_LAST";
    return super.toString();
  }
}

final class fpdf_action_t__ extends ffi.Opaque {}

final class fpdf_annotation_t__ extends ffi.Opaque {}

final class fpdf_attachment_t__ extends ffi.Opaque {}

final class fpdf_avail_t__ extends ffi.Opaque {}

final class fpdf_bitmap_t__ extends ffi.Opaque {}

final class fpdf_bookmark_t__ extends ffi.Opaque {}

final class fpdf_clippath_t__ extends ffi.Opaque {}

final class fpdf_dest_t__ extends ffi.Opaque {}

final class fpdf_document_t__ extends ffi.Opaque {}

final class fpdf_font_t__ extends ffi.Opaque {}

final class fpdf_form_handle_t__ extends ffi.Opaque {}

final class fpdf_glyphpath_t__ extends ffi.Opaque {}

final class fpdf_javascript_action_t extends ffi.Opaque {}

final class fpdf_link_t__ extends ffi.Opaque {}

final class fpdf_page_t__ extends ffi.Opaque {}

final class fpdf_pagelink_t__ extends ffi.Opaque {}

final class fpdf_pageobject_t__ extends ffi.Opaque {}

final class fpdf_pageobjectmark_t__ extends ffi.Opaque {}

final class fpdf_pagerange_t__ extends ffi.Opaque {}

final class fpdf_pathsegment_t extends ffi.Opaque {}

final class fpdf_schhandle_t__ extends ffi.Opaque {}

final class fpdf_signature_t__ extends ffi.Opaque {}

final class fpdf_structelement_t__ extends ffi.Opaque {}

final class fpdf_structelement_attr_t__ extends ffi.Opaque {}

final class fpdf_structelement_attr_value_t__ extends ffi.Opaque {}

final class fpdf_structtree_t__ extends ffi.Opaque {}

final class fpdf_textpage_t__ extends ffi.Opaque {}

final class fpdf_widget_t__ extends ffi.Opaque {}

final class fpdf_xobject_t__ extends ffi.Opaque {}

/// Duplex types
enum _FPDF_DUPLEXTYPE_ {
  DuplexUndefined(0),
  Simplex(1),
  DuplexFlipShortEdge(2),
  DuplexFlipLongEdge(3);

  final int value;
  const _FPDF_DUPLEXTYPE_(this.value);

  static _FPDF_DUPLEXTYPE_ fromValue(int value) => switch (value) {
    0 => DuplexUndefined,
    1 => Simplex,
    2 => DuplexFlipShortEdge,
    3 => DuplexFlipLongEdge,
    _ => throw ArgumentError("Unknown value for _FPDF_DUPLEXTYPE_: $value"),
  };
}

/// Structure for persisting a string beyond the duration of a callback.
/// Note: although represented as a char*, string may be interpreted as
/// a UTF-16LE formated string. Used only by XFA callbacks.
final class FPDF_BSTR_ extends ffi.Struct {
  /// String buffer, manipulate only with FPDF_BStr_* methods.
  external ffi.Pointer<ffi.Char> str;

  /// Length of the string, in bytes.
  @ffi.Int()
  external int len;
}

/// Matrix for transformation, in the form [a b c d e f], equivalent to:
/// | a  b  0 |
/// | c  d  0 |
/// | e  f  1 |
///
/// Translation is performed with [1 0 0 1 tx ty].
/// Scaling is performed with [sx 0 0 sy 0 0].
/// See PDF Reference 1.7, 4.2.2 Common Transformations for more.
final class _FS_MATRIX_ extends ffi.Struct {
  @ffi.Float()
  external double a;

  @ffi.Float()
  external double b;

  @ffi.Float()
  external double c;

  @ffi.Float()
  external double d;

  @ffi.Float()
  external double e;

  @ffi.Float()
  external double f;
}

/// Rectangle area(float) in device or page coordinate system.
final class _FS_RECTF_ extends ffi.Struct {
  /// The x-coordinate of the left-top corner.
  @ffi.Float()
  external double left;

  /// The y-coordinate of the left-top corner.
  @ffi.Float()
  external double top;

  /// The x-coordinate of the right-bottom corner.
  @ffi.Float()
  external double right;

  /// The y-coordinate of the right-bottom corner.
  @ffi.Float()
  external double bottom;
}

/// Rectangle size. Coordinate system agnostic.
final class FS_SIZEF_ extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

/// 2D Point. Coordinate system agnostic.
final class FS_POINTF_ extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

final class _FS_QUADPOINTSF extends ffi.Struct {
  @FS_FLOAT()
  external double x1;

  @FS_FLOAT()
  external double y1;

  @FS_FLOAT()
  external double x2;

  @FS_FLOAT()
  external double y2;

  @FS_FLOAT()
  external double x3;

  @FS_FLOAT()
  external double y3;

  @FS_FLOAT()
  external double x4;

  @FS_FLOAT()
  external double y4;
}

typedef FS_FLOAT = ffi.Float;
typedef DartFS_FLOAT = double;

/// PDF renderer types - Experimental.
/// Selection of 2D graphics library to use for rendering to FPDF_BITMAPs.
enum FPDF_RENDERER_TYPE {
  /// Anti-Grain Geometry - https://sourceforge.net/projects/agg/
  FPDF_RENDERERTYPE_AGG(0),

  /// Skia - https://skia.org/
  FPDF_RENDERERTYPE_SKIA(1);

  final int value;
  const FPDF_RENDERER_TYPE(this.value);

  static FPDF_RENDERER_TYPE fromValue(int value) => switch (value) {
    0 => FPDF_RENDERERTYPE_AGG,
    1 => FPDF_RENDERERTYPE_SKIA,
    _ => throw ArgumentError("Unknown value for FPDF_RENDERER_TYPE: $value"),
  };
}

/// Process-wide options for initializing the library.
final class FPDF_LIBRARY_CONFIG_ extends ffi.Struct {
  /// Version number of the interface. Currently must be 2.
  /// Support for version 1 will be deprecated in the future.
  @ffi.Int()
  external int version;

  /// Array of paths to scan in place of the defaults when using built-in
  /// FXGE font loading code. The array is terminated by a NULL pointer.
  /// The Array may be NULL itself to use the default paths. May be ignored
  /// entirely depending upon the platform.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> m_pUserFontPaths;

  /// Pointer to the v8::Isolate to use, or NULL to force PDFium to create one.
  external ffi.Pointer<ffi.Void> m_pIsolate;

  /// The embedder data slot to use in the v8::Isolate to store PDFium's
  /// per-isolate data. The value needs to be in the range
  /// [0, |v8::Internals::kNumIsolateDataLots|). Note that 0 is fine for most
  /// embedders.
  @ffi.UnsignedInt()
  external int m_v8EmbedderSlot;

  /// Pointer to the V8::Platform to use.
  external ffi.Pointer<ffi.Void> m_pPlatform;

  /// Explicit specification of core renderer to use. |m_RendererType| must be
  /// a valid value for |FPDF_LIBRARY_CONFIG| versions of this level or higher,
  /// or else the initialization will fail with an immediate crash.
  /// Note that use of a specified |FPDF_RENDERER_TYPE| value for which the
  /// corresponding render library is not included in the build will similarly
  /// fail with an immediate crash.
  @ffi.UnsignedInt()
  external int m_RendererType;
}

/// Process-wide options for initializing the library.
typedef FPDF_LIBRARY_CONFIG = FPDF_LIBRARY_CONFIG_;
typedef FPDF_DWORD = ffi.UnsignedLong;
typedef DartFPDF_DWORD = int;

/// Basic data types
typedef FPDF_BOOL = ffi.Int;
typedef DartFPDF_BOOL = int;
typedef FPDF_DOCUMENT = ffi.Pointer<fpdf_document_t__>;

/// For Windows programmers: In most cases it's OK to treat FPDF_WIDESTRING as a
/// Windows unicode string, however, special care needs to be taken if you
/// expect to process Unicode larger than 0xffff.
///
/// For Linux/Unix programmers: most compiler/library environments use 4 bytes
/// for a Unicode character, and you have to convert between FPDF_WIDESTRING and
/// system wide string by yourself.
typedef FPDF_STRING = ffi.Pointer<ffi.Char>;

/// Public PDFium API type for byte strings.
typedef FPDF_BYTESTRING = ffi.Pointer<ffi.Char>;

/// Structure for custom file access.
final class FPDF_FILEACCESS extends ffi.Struct {
  /// File length, in bytes.
  @ffi.UnsignedLong()
  external int m_FileLen;

  /// A function pointer for getting a block of data from a specific position.
  /// Position is specified by byte offset from the beginning of the file.
  /// The pointer to the buffer is never NULL and the size is never 0.
  /// The position and size will never go out of range of the file length.
  /// It may be possible for PDFium to call this function multiple times for
  /// the same position.
  /// Return value: should be non-zero if successful, zero for error.
  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void> param,
        ffi.UnsignedLong position,
        ffi.Pointer<ffi.UnsignedChar> pBuf,
        ffi.UnsignedLong size,
      )
    >
  >
  m_GetBlock;

  /// A custom pointer for all implementation specific data.  This pointer will
  /// be used as the first parameter to the m_GetBlock callback.
  external ffi.Pointer<ffi.Void> m_Param;
}

/// Structure for file reading or writing (I/O).
///
/// Note: This is a handler and should be implemented by callers,
/// and is only used from XFA.
final class FPDF_FILEHANDLER_ extends ffi.Struct {
  /// User-defined data.
  /// Note: Callers can use this field to track controls.
  external ffi.Pointer<ffi.Void> clientData;

  /// Callback function to release the current file stream object.
  ///
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// Returns:
  /// None.
  external ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> clientData)>
  >
  Release;

  /// Callback function to retrieve the current file stream size.
  ///
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// Returns:
  /// Size of file stream.
  external ffi.Pointer<
    ffi.NativeFunction<FPDF_DWORD Function(ffi.Pointer<ffi.Void> clientData)>
  >
  GetSize;

  /// Callback function to read data from the current file stream.
  ///
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// offset       -  Offset position starts from the beginning of file
  /// stream. This parameter indicates reading position.
  /// buffer       -  Memory buffer to store data which are read from
  /// file stream. This parameter should not be NULL.
  /// size         -  Size of data which should be read from file stream,
  /// in bytes. The buffer indicated by |buffer| must be
  /// large enough to store specified data.
  /// Returns:
  /// 0 for success, other value for failure.
  external ffi.Pointer<
    ffi.NativeFunction<
      FPDF_RESULT Function(
        ffi.Pointer<ffi.Void> clientData,
        FPDF_DWORD offset,
        ffi.Pointer<ffi.Void> buffer,
        FPDF_DWORD size,
      )
    >
  >
  ReadBlock;

  /// Callback function to write data into the current file stream.
  ///
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// offset       -  Offset position starts from the beginning of file
  /// stream. This parameter indicates writing position.
  /// buffer       -  Memory buffer contains data which is written into
  /// file stream. This parameter should not be NULL.
  /// size         -  Size of data which should be written into file
  /// stream, in bytes.
  /// Returns:
  /// 0 for success, other value for failure.
  external ffi.Pointer<
    ffi.NativeFunction<
      FPDF_RESULT Function(
        ffi.Pointer<ffi.Void> clientData,
        FPDF_DWORD offset,
        ffi.Pointer<ffi.Void> buffer,
        FPDF_DWORD size,
      )
    >
  >
  WriteBlock;

  /// Callback function to flush all internal accessing buffers.
  ///
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// Returns:
  /// 0 for success, other value for failure.
  external ffi.Pointer<
    ffi.NativeFunction<FPDF_RESULT Function(ffi.Pointer<ffi.Void> clientData)>
  >
  Flush;

  /// Callback function to change file size.
  ///
  /// Description:
  /// This function is called under writing mode usually. Implementer
  /// can determine whether to realize it based on application requests.
  /// Parameters:
  /// clientData   -  Pointer to user-defined data.
  /// size         -  New size of file stream, in bytes.
  /// Returns:
  /// 0 for success, other value for failure.
  external ffi.Pointer<
    ffi.NativeFunction<
      FPDF_RESULT Function(ffi.Pointer<ffi.Void> clientData, FPDF_DWORD size)
    >
  >
  Truncate;
}

typedef FPDF_RESULT = ffi.Int;
typedef DartFPDF_RESULT = int;
typedef FPDF_PAGE = ffi.Pointer<fpdf_page_t__>;

/// Rectangle area(float) in device or page coordinate system.
typedef FS_RECTF = _FS_RECTF_;

/// Rectangle size. Coordinate system agnostic.
typedef FS_SIZEF = FS_SIZEF_;

/// Struct for color scheme.
/// Each should be a 32-bit value specifying the color, in 8888 ARGB format.
final class FPDF_COLORSCHEME_ extends ffi.Struct {
  @FPDF_DWORD()
  external int path_fill_color;

  @FPDF_DWORD()
  external int path_stroke_color;

  @FPDF_DWORD()
  external int text_fill_color;

  @FPDF_DWORD()
  external int text_stroke_color;
}

typedef FPDF_BITMAP = ffi.Pointer<fpdf_bitmap_t__>;

/// Matrix for transformation, in the form [a b c d e f], equivalent to:
/// | a  b  0 |
/// | c  d  0 |
/// | e  f  1 |
///
/// Translation is performed with [1 0 0 1 tx ty].
/// Scaling is performed with [sx 0 0 sy 0 0].
/// See PDF Reference 1.7, 4.2.2 Common Transformations for more.
typedef FS_MATRIX = _FS_MATRIX_;
typedef FPDF_PAGERANGE = ffi.Pointer<fpdf_pagerange_t__>;
typedef FPDF_DEST = ffi.Pointer<fpdf_dest_t__>;
typedef FPDF_TEXTPAGE = ffi.Pointer<fpdf_textpage_t__>;
typedef FPDF_PAGEOBJECT = ffi.Pointer<fpdf_pageobject_t__>;
typedef FPDF_SCHHANDLE = ffi.Pointer<fpdf_schhandle_t__>;

/// The public PDFium API always uses UTF-16LE encoded wide strings, each
/// character uses 2 bytes (except surrogation), with the low byte first.
typedef FPDF_WIDESTRING = ffi.Pointer<FPDF_WCHAR>;

/// String types
typedef FPDF_WCHAR = ffi.UnsignedShort;
typedef DartFPDF_WCHAR = int;
typedef FPDF_PAGELINK = ffi.Pointer<fpdf_pagelink_t__>;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;
typedef Dart__cpu_mask = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>
  >
  __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>
  >
  __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;
typedef ssize_t = __ssize_t;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_MINSIGSTKSZ = 249;

const int _SC_SIGSTKSZ = 250;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDIO_H = 1;

const int NULL = 0;

const int __GNUC_VA_LIST = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int FPDF_OBJECT_UNKNOWN = 0;

const int FPDF_OBJECT_BOOLEAN = 1;

const int FPDF_OBJECT_NUMBER = 2;

const int FPDF_OBJECT_STRING = 3;

const int FPDF_OBJECT_NAME = 4;

const int FPDF_OBJECT_ARRAY = 5;

const int FPDF_OBJECT_DICTIONARY = 6;

const int FPDF_OBJECT_STREAM = 7;

const int FPDF_OBJECT_NULLOBJ = 8;

const int FPDF_OBJECT_REFERENCE = 9;

const int FPDF_POLICY_MACHINETIME_ACCESS = 0;

const int FPDF_ERR_SUCCESS = 0;

const int FPDF_ERR_UNKNOWN = 1;

const int FPDF_ERR_FILE = 2;

const int FPDF_ERR_FORMAT = 3;

const int FPDF_ERR_PASSWORD = 4;

const int FPDF_ERR_SECURITY = 5;

const int FPDF_ERR_PAGE = 6;

const int FPDF_ANNOT = 1;

const int FPDF_LCD_TEXT = 2;

const int FPDF_NO_NATIVETEXT = 4;

const int FPDF_GRAYSCALE = 8;

const int FPDF_DEBUG_INFO = 128;

const int FPDF_NO_CATCH = 256;

const int FPDF_RENDER_LIMITEDIMAGECACHE = 512;

const int FPDF_RENDER_FORCEHALFTONE = 1024;

const int FPDF_PRINTING = 2048;

const int FPDF_RENDER_NO_SMOOTHTEXT = 4096;

const int FPDF_RENDER_NO_SMOOTHIMAGE = 8192;

const int FPDF_RENDER_NO_SMOOTHPATH = 16384;

const int FPDF_REVERSE_BYTE_ORDER = 16;

const int FPDF_CONVERT_FILL_TO_STROKE = 32;

const int FPDFBitmap_Unknown = 0;

const int FPDFBitmap_Gray = 1;

const int FPDFBitmap_BGR = 2;

const int FPDFBitmap_BGRx = 3;

const int FPDFBitmap_BGRA = 4;

const int FPDFBitmap_BGRA_Premul = 5;

const int FPDF_MATCHCASE = 1;

const int FPDF_MATCHWHOLEWORD = 2;

const int FPDF_CONSECUTIVE = 4;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _BITS_SETJMP_H = 1;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int _UNISTD_H = 1;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_MINSIGSTKSZ1 = 249;

const int _SC_SIGSTKSZ1 = 250;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;
